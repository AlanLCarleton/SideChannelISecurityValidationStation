
basic-passwdcheck-CWLITEXMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000096c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00802000  0000096c  00000a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000122  00802130  00802130  00000b30  2**0
                  ALLOC
  3 .comment      00000024  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b54  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 000001c8  00000000  00000000  00000b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00003b29  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00002929  00000000  00000000  00004889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00001caf  00000000  00000000  000071b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000002dc  00000000  00000000  00008e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001f69  00000000  00000000  00009140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00000c8a  00000000  00000000  0000b0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000000f0  00000000  00000000  0000bd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__ctors_end>
   4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
   8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
   c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  28:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  ac:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  b0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  b4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  b8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  bc:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  c0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  c4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  c8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  cc:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  d0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  d4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  d8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  dc:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  e0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  e4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  e8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  ec:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  f0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  f4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  f8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  fc:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 100:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 104:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 108:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 10c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 110:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 114:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 118:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 11c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 120:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 124:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 128:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 12c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 130:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 134:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 138:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 13c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 140:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 144:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 148:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 14c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 150:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 154:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 158:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 15c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 160:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 164:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 168:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 16c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 170:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 174:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 178:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 17c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 180:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 184:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 188:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 18c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 190:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 194:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 198:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 19c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 1a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 1a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 1a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 1ac:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 1b0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 1b4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 1b8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 1bc:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 1c0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
 1c4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>

000001c8 <__trampolines_start>:
 1c8:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <check_version>

000001cc <__ctors_end>:
 1cc:	11 24       	eor	r1, r1
 1ce:	1f be       	out	0x3f, r1	; 63
 1d0:	cf ef       	ldi	r28, 0xFF	; 255
 1d2:	cd bf       	out	0x3d, r28	; 61
 1d4:	df e3       	ldi	r29, 0x3F	; 63
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
 1dc:	11 e2       	ldi	r17, 0x21	; 33
 1de:	a0 e0       	ldi	r26, 0x00	; 0
 1e0:	b0 e2       	ldi	r27, 0x20	; 32
 1e2:	ec e6       	ldi	r30, 0x6C	; 108
 1e4:	f9 e0       	ldi	r31, 0x09	; 9
 1e6:	00 e0       	ldi	r16, 0x00	; 0
 1e8:	0b bf       	out	0x3b, r16	; 59
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
 1ec:	07 90       	elpm	r0, Z+
 1ee:	0d 92       	st	X+, r0
 1f0:	a0 33       	cpi	r26, 0x30	; 48
 1f2:	b1 07       	cpc	r27, r17
 1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
 1f6:	22 e2       	ldi	r18, 0x22	; 34
 1f8:	a0 e3       	ldi	r26, 0x30	; 48
 1fa:	b1 e2       	ldi	r27, 0x21	; 33
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
 1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
 200:	a2 35       	cpi	r26, 0x52	; 82
 202:	b2 07       	cpc	r27, r18
 204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
 206:	0e 94 70 03 	call	0x6e0	; 0x6e0 <main>
 20a:	0c 94 b4 04 	jmp	0x968	; 0x968 <_exit>

0000020e <__bad_interrupt>:
 20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <delay_2_ms>:

  } while (*++c);
}

static void delay_2_ms()
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	0f 92       	push	r0
 218:	0f 92       	push	r0
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
  for (volatile unsigned int i=0; i < 0xfff; i++ ){
 21e:	19 82       	std	Y+1, r1	; 0x01
 220:	1a 82       	std	Y+2, r1	; 0x02
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	8f 3f       	cpi	r24, 0xFF	; 255
 228:	9f 40       	sbci	r25, 0x0F	; 15
 22a:	28 f0       	brcs	.+10     	; 0x236 <delay_2_ms+0x24>
    ;
  }
}
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret
  for (volatile unsigned int i=0; i < 0xfff; i++ ){
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	9a 81       	ldd	r25, Y+2	; 0x02
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	89 83       	std	Y+1, r24	; 0x01
 23e:	9a 83       	std	Y+2, r25	; 0x02
 240:	f0 cf       	rjmp	.-32     	; 0x222 <delay_2_ms+0x10>

00000242 <my_puts>:
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ec 01       	movw	r28, r24
    putch(*c);
 248:	89 91       	ld	r24, Y+
 24a:	0e 94 c5 02 	call	0x58a	; 0x58a <output_ch_0>
  } while (*++c);
 24e:	88 81       	ld	r24, Y
 250:	81 11       	cpse	r24, r1
 252:	fa cf       	rjmp	.-12     	; 0x248 <my_puts+0x6>
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <my_read>:

void my_read(char *buf, int len)
{
 25a:	af 92       	push	r10
 25c:	bf 92       	push	r11
 25e:	cf 92       	push	r12
 260:	df 92       	push	r13
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
 270:	8b 01       	movw	r16, r22
  for(int i = 0; i < len; i++) {
 272:	7c 01       	movw	r14, r24
 274:	b1 2c       	mov	r11, r1
 276:	a1 2c       	mov	r10, r1
 278:	a0 16       	cp	r10, r16
 27a:	b1 06       	cpc	r11, r17
 27c:	ec f4       	brge	.+58     	; 0x2b8 <my_read+0x5e>
    while (buf[i] = getch(), buf[i] == '\0');
 27e:	67 01       	movw	r12, r14
 280:	0e 94 be 02 	call	0x57c	; 0x57c <input_ch_0>
 284:	f7 01       	movw	r30, r14
 286:	80 83       	st	Z, r24
 288:	88 23       	and	r24, r24
 28a:	d1 f3       	breq	.-12     	; 0x280 <my_read+0x26>

    if (buf[i] == '\n') {
 28c:	ff ef       	ldi	r31, 0xFF	; 255
 28e:	ef 1a       	sub	r14, r31
 290:	ff 0a       	sbc	r15, r31
 292:	8a 30       	cpi	r24, 0x0A	; 10
 294:	69 f4       	brne	.+26     	; 0x2b0 <my_read+0x56>
      buf[i] = '\0';
 296:	f6 01       	movw	r30, r12
 298:	10 82       	st	Z, r1
      return;
    }
  }
  buf[len - 1] = '\0';
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	df 90       	pop	r13
 2a8:	cf 90       	pop	r12
 2aa:	bf 90       	pop	r11
 2ac:	af 90       	pop	r10
 2ae:	08 95       	ret
  for(int i = 0; i < len; i++) {
 2b0:	ff ef       	ldi	r31, 0xFF	; 255
 2b2:	af 1a       	sub	r10, r31
 2b4:	bf 0a       	sbc	r11, r31
 2b6:	e0 cf       	rjmp	.-64     	; 0x278 <my_read+0x1e>
  buf[len - 1] = '\0';
 2b8:	c0 0f       	add	r28, r16
 2ba:	d1 1f       	adc	r29, r17
 2bc:	21 97       	sbiw	r28, 0x01	; 1
 2be:	18 82       	st	Y, r1
 2c0:	ec cf       	rjmp	.-40     	; 0x29a <my_read+0x40>

000002c2 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t* v)
{
	return SS_VER;
}
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	08 95       	ret

000002c6 <hex_decode>:
{
 2c6:	9c 01       	movw	r18, r24
 2c8:	fa 01       	movw	r30, r20
	for(int i = 0; i < len; i++)
 2ca:	db 01       	movw	r26, r22
 2cc:	50 e0       	ldi	r21, 0x00	; 0
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	42 17       	cp	r20, r18
 2d2:	53 07       	cpc	r21, r19
 2d4:	1c f0       	brlt	.+6      	; 0x2dc <hex_decode+0x16>
	return 0;
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	80 e0       	ldi	r24, 0x00	; 0
}
 2da:	08 95       	ret
		char n_hi = ascii_buf[2*i];
 2dc:	8c 91       	ld	r24, X
		char n_lo = ascii_buf[2*i+1];
 2de:	11 96       	adiw	r26, 0x01	; 1
 2e0:	9c 91       	ld	r25, X
 2e2:	11 97       	sbiw	r26, 0x01	; 1
		if(n_lo >= '0' && n_lo <= '9')
 2e4:	60 ed       	ldi	r22, 0xD0	; 208
 2e6:	69 0f       	add	r22, r25
 2e8:	6a 30       	cpi	r22, 0x0A	; 10
 2ea:	78 f4       	brcc	.+30     	; 0x30a <hex_decode+0x44>
			data_buf[i] = n_lo - '0';
 2ec:	60 83       	st	Z, r22
		if(n_hi >= '0' && n_hi <= '9')
 2ee:	90 ed       	ldi	r25, 0xD0	; 208
 2f0:	98 0f       	add	r25, r24
 2f2:	9a 30       	cpi	r25, 0x0A	; 10
 2f4:	d0 f4       	brcc	.+52     	; 0x32a <hex_decode+0x64>
			data_buf[i] |= (n_hi - '0') << 4;
 2f6:	82 95       	swap	r24
 2f8:	80 7f       	andi	r24, 0xF0	; 240
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 2fa:	90 81       	ld	r25, Z
 2fc:	89 2b       	or	r24, r25
 2fe:	80 83       	st	Z, r24
	for(int i = 0; i < len; i++)
 300:	4f 5f       	subi	r20, 0xFF	; 255
 302:	5f 4f       	sbci	r21, 0xFF	; 255
 304:	31 96       	adiw	r30, 0x01	; 1
 306:	12 96       	adiw	r26, 0x02	; 2
 308:	e3 cf       	rjmp	.-58     	; 0x2d0 <hex_decode+0xa>
		else if(n_lo >= 'A' && n_lo <= 'F')
 30a:	6f eb       	ldi	r22, 0xBF	; 191
 30c:	69 0f       	add	r22, r25
 30e:	66 30       	cpi	r22, 0x06	; 6
 310:	18 f4       	brcc	.+6      	; 0x318 <hex_decode+0x52>
			data_buf[i] = n_lo - 'A' + 10;
 312:	97 53       	subi	r25, 0x37	; 55
			data_buf[i] = n_lo - 'a' + 10;
 314:	90 83       	st	Z, r25
 316:	eb cf       	rjmp	.-42     	; 0x2ee <hex_decode+0x28>
		else if(n_lo >= 'a' && n_lo <= 'f')
 318:	6f e9       	ldi	r22, 0x9F	; 159
 31a:	69 0f       	add	r22, r25
 31c:	66 30       	cpi	r22, 0x06	; 6
 31e:	18 f0       	brcs	.+6      	; 0x326 <hex_decode+0x60>
			return 1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	08 95       	ret
			data_buf[i] = n_lo - 'a' + 10;
 326:	97 55       	subi	r25, 0x57	; 87
 328:	f5 cf       	rjmp	.-22     	; 0x314 <hex_decode+0x4e>
		else if(n_hi >= 'A' && n_hi <= 'F')
 32a:	9f eb       	ldi	r25, 0xBF	; 191
 32c:	98 0f       	add	r25, r24
 32e:	96 30       	cpi	r25, 0x06	; 6
 330:	40 f4       	brcc	.+16     	; 0x342 <hex_decode+0x7c>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 332:	87 53       	subi	r24, 0x37	; 55
 334:	99 0b       	sbc	r25, r25
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 336:	64 e0       	ldi	r22, 0x04	; 4
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	6a 95       	dec	r22
 33e:	e1 f7       	brne	.-8      	; 0x338 <hex_decode+0x72>
 340:	dc cf       	rjmp	.-72     	; 0x2fa <hex_decode+0x34>
		else if(n_hi >= 'a' && n_hi <= 'f')
 342:	9f e9       	ldi	r25, 0x9F	; 159
 344:	98 0f       	add	r25, r24
 346:	96 30       	cpi	r25, 0x06	; 6
 348:	58 f7       	brcc	.-42     	; 0x320 <hex_decode+0x5a>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 34a:	87 55       	subi	r24, 0x57	; 87
 34c:	99 0b       	sbc	r25, r25
 34e:	f3 cf       	rjmp	.-26     	; 0x336 <hex_decode+0x70>

00000350 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands >= MAX_SS_CMDS)
 350:	20 91 30 21 	lds	r18, 0x2130	; 0x802130 <num_commands>
 354:	30 91 31 21 	lds	r19, 0x2131	; 0x802131 <num_commands+0x1>
 358:	20 31       	cpi	r18, 0x10	; 16
 35a:	31 05       	cpc	r19, r1
 35c:	cc f4       	brge	.+50     	; 0x390 <simpleserial_addcmd+0x40>
		return 1;

	if(len >= MAX_SS_LEN)
 35e:	60 34       	cpi	r22, 0x40	; 64
 360:	71 05       	cpc	r23, r1
 362:	b0 f4       	brcc	.+44     	; 0x390 <simpleserial_addcmd+0x40>
		return 1;

	commands[num_commands].c   = c;
 364:	95 e0       	ldi	r25, 0x05	; 5
 366:	92 9f       	mul	r25, r18
 368:	f0 01       	movw	r30, r0
 36a:	93 9f       	mul	r25, r19
 36c:	f0 0d       	add	r31, r0
 36e:	11 24       	eor	r1, r1
 370:	ee 5c       	subi	r30, 0xCE	; 206
 372:	fe 4d       	sbci	r31, 0xDE	; 222
 374:	80 83       	st	Z, r24
	commands[num_commands].len = len;
 376:	61 83       	std	Z+1, r22	; 0x01
 378:	72 83       	std	Z+2, r23	; 0x02
	commands[num_commands].fp  = fp;
 37a:	43 83       	std	Z+3, r20	; 0x03
 37c:	54 83       	std	Z+4, r21	; 0x04
	num_commands++;
 37e:	2f 5f       	subi	r18, 0xFF	; 255
 380:	3f 4f       	sbci	r19, 0xFF	; 255
 382:	20 93 30 21 	sts	0x2130, r18	; 0x802130 <num_commands>
 386:	30 93 31 21 	sts	0x2131, r19	; 0x802131 <num_commands+0x1>

	return 0;
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret
		return 1;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
}
 394:	08 95       	ret

00000396 <simpleserial_init>:
	simpleserial_addcmd('v', 0, check_version);
 396:	41 e6       	ldi	r20, 0x61	; 97
 398:	51 e0       	ldi	r21, 0x01	; 1
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	86 e7       	ldi	r24, 0x76	; 118
 3a0:	0c 94 a8 01 	jmp	0x350	; 0x350 <simpleserial_addcmd>

000003a4 <simpleserial_get>:

void simpleserial_get(void)
{
 3a4:	8f 92       	push	r8
 3a6:	9f 92       	push	r9
 3a8:	af 92       	push	r10
 3aa:	bf 92       	push	r11
 3ac:	cf 92       	push	r12
 3ae:	df 92       	push	r13
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	c0 5c       	subi	r28, 0xC0	; 192
 3c2:	d1 09       	sbc	r29, r1
 3c4:	cd bf       	out	0x3d, r28	; 61
 3c6:	de bf       	out	0x3e, r29	; 62
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 3c8:	0e 94 be 02 	call	0x57c	; 0x57c <input_ch_0>

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 3cc:	40 91 30 21 	lds	r20, 0x2130	; 0x802130 <num_commands>
 3d0:	50 91 31 21 	lds	r21, 0x2131	; 0x802131 <num_commands+0x1>
 3d4:	22 e3       	ldi	r18, 0x32	; 50
 3d6:	31 e2       	ldi	r19, 0x21	; 33
 3d8:	10 e0       	ldi	r17, 0x00	; 0
 3da:	00 e0       	ldi	r16, 0x00	; 0
 3dc:	04 17       	cp	r16, r20
 3de:	15 07       	cpc	r17, r21
 3e0:	0c f4       	brge	.+2      	; 0x3e4 <simpleserial_get+0x40>
 3e2:	4f c0       	rjmp	.+158    	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
		if(commands[cmd].c == c)
			break;
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 3e4:	40 17       	cp	r20, r16
 3e6:	51 07       	cpc	r21, r17
 3e8:	d9 f1       	breq	.+118    	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
 3ea:	9e 01       	movw	r18, r28
 3ec:	2f 5f       	subi	r18, 0xFF	; 255
 3ee:	3f 4f       	sbci	r19, 0xFF	; 255
 3f0:	79 01       	movw	r14, r18
	for(cmd = 0; cmd < num_commands; cmd++)
 3f2:	d1 2c       	mov	r13, r1
 3f4:	c1 2c       	mov	r12, r1
 3f6:	49 01       	movw	r8, r18
		return;

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 3f8:	25 e0       	ldi	r18, 0x05	; 5
 3fa:	20 9f       	mul	r18, r16
 3fc:	c0 01       	movw	r24, r0
 3fe:	21 9f       	mul	r18, r17
 400:	90 0d       	add	r25, r0
 402:	11 24       	eor	r1, r1
 404:	dc 01       	movw	r26, r24
 406:	ad 5c       	subi	r26, 0xCD	; 205
 408:	be 4d       	sbci	r27, 0xDE	; 222
 40a:	5d 01       	movw	r10, r26
 40c:	d5 01       	movw	r26, r10
 40e:	8d 91       	ld	r24, X+
 410:	9c 91       	ld	r25, X
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	c8 16       	cp	r12, r24
 418:	d9 06       	cpc	r13, r25
 41a:	f0 f1       	brcs	.+124    	; 0x498 <__FUSE_REGION_LENGTH__+0x98>

		ascii_buf[i] = c;
	}

	// Assert that last character is \n or \r
	c = getch();
 41c:	0e 94 be 02 	call	0x57c	; 0x57c <input_ch_0>
	if(c != '\n' && c != '\r')
 420:	8a 30       	cpi	r24, 0x0A	; 10
 422:	11 f0       	breq	.+4      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
 424:	8d 30       	cpi	r24, 0x0D	; 13
 426:	e1 f4       	brne	.+56     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
		return;

	// ASCII buffer is full: convert to bytes 
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 428:	25 e0       	ldi	r18, 0x05	; 5
 42a:	20 9f       	mul	r18, r16
 42c:	c0 01       	movw	r24, r0
 42e:	21 9f       	mul	r18, r17
 430:	90 0d       	add	r25, r0
 432:	11 24       	eor	r1, r1
 434:	8c 01       	movw	r16, r24
 436:	0e 5c       	subi	r16, 0xCE	; 206
 438:	1e 4d       	sbci	r17, 0xDE	; 222
 43a:	ae 01       	movw	r20, r28
 43c:	4f 57       	subi	r20, 0x7F	; 127
 43e:	5f 4f       	sbci	r21, 0xFF	; 255
 440:	b4 01       	movw	r22, r8
 442:	f8 01       	movw	r30, r16
 444:	81 81       	ldd	r24, Z+1	; 0x01
 446:	92 81       	ldd	r25, Z+2	; 0x02
 448:	0e 94 63 01 	call	0x2c6	; 0x2c6 <hex_decode>
 44c:	89 2b       	or	r24, r25
 44e:	41 f4       	brne	.+16     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf);
 450:	d8 01       	movw	r26, r16
 452:	13 96       	adiw	r26, 0x03	; 3
 454:	ed 91       	ld	r30, X+
 456:	fc 91       	ld	r31, X
 458:	ce 01       	movw	r24, r28
 45a:	8f 57       	subi	r24, 0x7F	; 127
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
 45e:	19 95       	eicall
	
	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
#endif
}
 460:	c0 54       	subi	r28, 0x40	; 64
 462:	df 4f       	sbci	r29, 0xFF	; 255
 464:	cd bf       	out	0x3d, r28	; 61
 466:	de bf       	out	0x3e, r29	; 62
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	ff 90       	pop	r15
 472:	ef 90       	pop	r14
 474:	df 90       	pop	r13
 476:	cf 90       	pop	r12
 478:	bf 90       	pop	r11
 47a:	af 90       	pop	r10
 47c:	9f 90       	pop	r9
 47e:	8f 90       	pop	r8
 480:	08 95       	ret
		if(commands[cmd].c == c)
 482:	2b 5f       	subi	r18, 0xFB	; 251
 484:	3f 4f       	sbci	r19, 0xFF	; 255
 486:	f9 01       	movw	r30, r18
 488:	35 97       	sbiw	r30, 0x05	; 5
 48a:	90 81       	ld	r25, Z
 48c:	98 17       	cp	r25, r24
 48e:	09 f4       	brne	.+2      	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
 490:	ac cf       	rjmp	.-168    	; 0x3ea <simpleserial_get+0x46>
	for(cmd = 0; cmd < num_commands; cmd++)
 492:	0f 5f       	subi	r16, 0xFF	; 255
 494:	1f 4f       	sbci	r17, 0xFF	; 255
 496:	a2 cf       	rjmp	.-188    	; 0x3dc <simpleserial_get+0x38>
		c = getch();
 498:	0e 94 be 02 	call	0x57c	; 0x57c <input_ch_0>
		if(c == '\n' || c == '\r')
 49c:	8a 30       	cpi	r24, 0x0A	; 10
 49e:	01 f3       	breq	.-64     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
 4a0:	8d 30       	cpi	r24, 0x0D	; 13
 4a2:	f1 f2       	breq	.-68     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
		ascii_buf[i] = c;
 4a4:	f7 01       	movw	r30, r14
 4a6:	81 93       	st	Z+, r24
 4a8:	7f 01       	movw	r14, r30
	for(int i = 0; i < 2*commands[cmd].len; i++)
 4aa:	ff ef       	ldi	r31, 0xFF	; 255
 4ac:	cf 1a       	sub	r12, r31
 4ae:	df 0a       	sbc	r13, r31
 4b0:	ad cf       	rjmp	.-166    	; 0x40c <__FUSE_REGION_LENGTH__+0xc>

000004b2 <simpleserial_put>:

void simpleserial_put(char c, int size, uint8_t* output)
{
 4b2:	ef 92       	push	r14
 4b4:	ff 92       	push	r15
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	8b 01       	movw	r16, r22
 4c0:	7a 01       	movw	r14, r20
	// Write first character
	putch(c);
 4c2:	0e 94 c5 02 	call	0x58a	; 0x58a <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 4c6:	e7 01       	movw	r28, r14
 4c8:	f1 2c       	mov	r15, r1
 4ca:	e1 2c       	mov	r14, r1
 4cc:	e0 16       	cp	r14, r16
 4ce:	f1 06       	cpc	r15, r17
 4d0:	4c f0       	brlt	.+18     	; 0x4e4 <simpleserial_put+0x32>
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 4d2:	8a e0       	ldi	r24, 0x0A	; 10
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	ff 90       	pop	r15
 4de:	ef 90       	pop	r14
	putch('\n');
 4e0:	0c 94 c5 02 	jmp	0x58a	; 0x58a <output_ch_0>
		putch(hex_lookup[output[i] >> 4 ]);
 4e4:	e9 91       	ld	r30, Y+
 4e6:	e2 95       	swap	r30
 4e8:	ef 70       	andi	r30, 0x0F	; 15
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	ec 5f       	subi	r30, 0xFC	; 252
 4ee:	ff 4d       	sbci	r31, 0xDF	; 223
 4f0:	80 81       	ld	r24, Z
 4f2:	0e 94 c5 02 	call	0x58a	; 0x58a <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
 4f6:	fe 01       	movw	r30, r28
 4f8:	31 97       	sbiw	r30, 0x01	; 1
 4fa:	e0 81       	ld	r30, Z
 4fc:	ef 70       	andi	r30, 0x0F	; 15
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	ec 5f       	subi	r30, 0xFC	; 252
 502:	ff 4d       	sbci	r31, 0xDF	; 223
 504:	80 81       	ld	r24, Z
 506:	0e 94 c5 02 	call	0x58a	; 0x58a <output_ch_0>
	for(int i = 0; i < size; i++)
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	e8 1a       	sub	r14, r24
 50e:	f8 0a       	sbc	r15, r24
 510:	dd cf       	rjmp	.-70     	; 0x4cc <simpleserial_put+0x1a>

00000512 <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
 512:	e0 e4       	ldi	r30, 0x40	; 64
 514:	f6 e0       	ldi	r31, 0x06	; 6
 516:	88 e0       	ldi	r24, 0x08	; 8
 518:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
 51a:	84 e0       	ldi	r24, 0x04	; 4
 51c:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 51e:	e0 ea       	ldi	r30, 0xA0	; 160
 520:	f8 e0       	ldi	r31, 0x08	; 8
 522:	83 e0       	ldi	r24, 0x03	; 3
 524:	85 83       	std	Z+5, r24	; 0x05
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (1/(16*(((I/O clock frequency)/Baudrate)-1)
	 *                 = 12
	 */
	USART_Baudrate_Set(&USART, 11, 0);
 526:	8b e0       	ldi	r24, 0x0B	; 11
 528:	86 83       	std	Z+6, r24	; 0x06
 52a:	17 82       	std	Z+7, r1	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 52c:	84 81       	ldd	r24, Z+4	; 0x04
 52e:	80 61       	ori	r24, 0x10	; 16
 530:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
 532:	84 81       	ldd	r24, Z+4	; 0x04
 534:	88 60       	ori	r24, 0x08	; 8
 536:	84 83       	std	Z+4, r24	; 0x04
   }
 538:	08 95       	ret

0000053a <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	0f 92       	push	r0
 540:	0f 92       	push	r0
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	fc 01       	movw	r30, r24
 548:	69 83       	std	Y+1, r22	; 0x01
 54a:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	80 e0       	ldi	r24, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
 550:	29 81       	ldd	r18, Y+1	; 0x01
 552:	3a 81       	ldd	r19, Y+2	; 0x02
 554:	28 17       	cp	r18, r24
 556:	39 07       	cpc	r19, r25
 558:	11 f4       	brne	.+4      	; 0x55e <input_ch_w_timeout_0+0x24>
			return BYTE_REC;
			}
		timeout_counter++;
		}
		
	return TIMEOUT;
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	08 c0       	rjmp	.+16     	; 0x56e <input_ch_w_timeout_0+0x34>
		if (USART_IsRXComplete(&USART))
 55e:	20 91 a1 08 	lds	r18, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 562:	27 ff       	sbrs	r18, 7
 564:	09 c0       	rjmp	.+18     	; 0x578 <input_ch_w_timeout_0+0x3e>
			*data = USART_GetChar(&USART);
 566:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 56a:	80 83       	st	Z, r24
			return BYTE_REC;
 56c:	81 e0       	ldi	r24, 0x01	; 1
	}
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret
		timeout_counter++;
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	ea cf       	rjmp	.-44     	; 0x550 <input_ch_w_timeout_0+0x16>

0000057c <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
 57c:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 580:	87 ff       	sbrs	r24, 7
 582:	fc cf       	rjmp	.-8      	; 0x57c <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
 584:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	}
 588:	08 95       	ret

0000058a <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
 58a:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 58e:	95 ff       	sbrs	r25, 5
 590:	fc cf       	rjmp	.-8      	; 0x58a <output_ch_0>
	USART_PutChar(&USART, data);
 592:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	return;
 596:	08 95       	ret

00000598 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 598:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 59a:	60 83       	st	Z, r22
 59c:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 59e:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 5a0:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 5a2:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 5a4:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 5a6:	15 86       	std	Z+13, r1	; 0x0d
}
 5a8:	08 95       	ret

000005aa <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 5aa:	fc 01       	movw	r30, r24
 5ac:	62 83       	std	Z+2, r22	; 0x02
}
 5ae:	08 95       	ret

000005b0 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 5b0:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 5b2:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 5b4:	26 85       	ldd	r18, Z+14	; 0x0e
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 5b6:	9f 5f       	subi	r25, 0xFF	; 255
 5b8:	93 70       	andi	r25, 0x03	; 3

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	92 13       	cpse	r25, r18
 5be:	01 c0       	rjmp	.+2      	; 0x5c2 <USART_TXBuffer_FreeSpace+0x12>
 5c0:	80 e0       	ldi	r24, 0x00	; 0
}
 5c2:	08 95       	ret

000005c4 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	ec 01       	movw	r28, r24
 5cc:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 5ce:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 5d2:	88 23       	and	r24, r24
 5d4:	79 f0       	breq	.+30     	; 0x5f4 <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 5d6:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
 5d8:	fe 01       	movw	r30, r28
 5da:	e9 0f       	add	r30, r25
 5dc:	f1 1d       	adc	r31, r1
 5de:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 5e0:	9f 5f       	subi	r25, 0xFF	; 255
 5e2:	93 70       	andi	r25, 0x03	; 3
 5e4:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 5e6:	e8 81       	ld	r30, Y
 5e8:	f9 81       	ldd	r31, Y+1	; 0x01
 5ea:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 5ec:	9c 7f       	andi	r25, 0xFC	; 252
 5ee:	2a 81       	ldd	r18, Y+2	; 0x02
 5f0:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 5f2:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	1f 91       	pop	r17
 5fa:	08 95       	ret

000005fc <USART_RXBufferData_Available>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
 5fc:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 5fe:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 600:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	29 13       	cpse	r18, r25
 606:	01 c0       	rjmp	.+2      	; 0x60a <USART_RXBufferData_Available+0xe>
 608:	80 e0       	ldi	r24, 0x00	; 0
}
 60a:	08 95       	ret

0000060c <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 60c:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 60e:	a4 85       	ldd	r26, Z+12	; 0x0c
 610:	a8 0f       	add	r26, r24
 612:	b9 2f       	mov	r27, r25
 614:	b1 1d       	adc	r27, r1
 616:	13 96       	adiw	r26, 0x03	; 3
 618:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 61a:	94 85       	ldd	r25, Z+12	; 0x0c
 61c:	9f 5f       	subi	r25, 0xFF	; 255
 61e:	93 70       	andi	r25, 0x03	; 3
 620:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 622:	08 95       	ret

00000624 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 624:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 626:	83 85       	ldd	r24, Z+11	; 0x0b
 628:	8f 5f       	subi	r24, 0xFF	; 255
 62a:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 62c:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 62e:	a0 81       	ld	r26, Z
 630:	b1 81       	ldd	r27, Z+1	; 0x01
 632:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
 634:	82 17       	cp	r24, r18
 636:	49 f0       	breq	.+18     	; 0x64a <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 638:	a3 85       	ldd	r26, Z+11	; 0x0b
 63a:	ae 0f       	add	r26, r30
 63c:	bf 2f       	mov	r27, r31
 63e:	b1 1d       	adc	r27, r1
 640:	13 96       	adiw	r26, 0x03	; 3
 642:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
 644:	83 87       	std	Z+11, r24	; 0x0b
		ans = true;
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	08 95       	ret
	  	ans = false;
 64a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return ans;
}
 64c:	08 95       	ret

0000064e <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 654:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 656:	95 85       	ldd	r25, Z+13	; 0x0d
 658:	a0 81       	ld	r26, Z
 65a:	b1 81       	ldd	r27, Z+1	; 0x01
 65c:	98 13       	cpse	r25, r24
 65e:	09 c0       	rjmp	.+18     	; 0x672 <USART_DataRegEmpty+0x24>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 660:	13 96       	adiw	r26, 0x03	; 3
 662:	8c 91       	ld	r24, X
 664:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 666:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 668:	13 96       	adiw	r26, 0x03	; 3
 66a:	8c 93       	st	X, r24
		usart_data->usart->DATA = data;

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
	}
}
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 672:	c6 85       	ldd	r28, Z+14	; 0x0e
 674:	ce 0f       	add	r28, r30
 676:	df 2f       	mov	r29, r31
 678:	d1 1d       	adc	r29, r1
 67a:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
 67c:	8c 93       	st	X, r24
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 67e:	86 85       	ldd	r24, Z+14	; 0x0e
 680:	8f 5f       	subi	r24, 0xFF	; 255
 682:	83 70       	andi	r24, 0x03	; 3
 684:	86 87       	std	Z+14, r24	; 0x0e
}
 686:	f2 cf       	rjmp	.-28     	; 0x66c <USART_DataRegEmpty+0x1e>

00000688 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 688:	fc 01       	movw	r30, r24
 68a:	cb 01       	movw	r24, r22
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
 68c:	24 81       	ldd	r18, Z+4	; 0x04
	if(data & 0x0100) {
 68e:	70 ff       	sbrs	r23, 0
 690:	04 c0       	rjmp	.+8      	; 0x69a <USART_NineBits_PutChar+0x12>
		usart->CTRLB |= USART_TXB8_bm;
 692:	21 60       	ori	r18, 0x01	; 1
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 694:	24 83       	std	Z+4, r18	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 696:	80 83       	st	Z, r24
}
 698:	08 95       	ret
		usart->CTRLB &= ~USART_TXB8_bm;
 69a:	2e 7f       	andi	r18, 0xFE	; 254
 69c:	fb cf       	rjmp	.-10     	; 0x694 <USART_NineBits_PutChar+0xc>

0000069e <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 69e:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 6a0:	84 81       	ldd	r24, Z+4	; 0x04
 6a2:	80 ff       	sbrs	r24, 0
 6a4:	04 c0       	rjmp	.+8      	; 0x6ae <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
 6a6:	80 81       	ld	r24, Z
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	91 60       	ori	r25, 0x01	; 1
 6ac:	08 95       	ret
	}else {
		return(usart->DATA);
 6ae:	80 81       	ld	r24, Z
 6b0:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 6b2:	08 95       	ret

000006b4 <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
 6b4:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    OSC.PLLCTRL = 0x00;
 6b8:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
    OSC.CTRL |= OSC_XOSCEN_bm;
 6bc:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 6c0:	88 60       	ori	r24, 0x08	; 8
 6c2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
 6c6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 6ca:	83 ff       	sbrs	r24, 3
 6cc:	fc cf       	rjmp	.-8      	; 0x6c6 <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
 6ce:	88 ed       	ldi	r24, 0xD8	; 216
 6d0:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
 6d2:	83 e0       	ldi	r24, 0x03	; 3
 6d4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
 6d8:	88 e0       	ldi	r24, 0x08	; 8
 6da:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
 #if PLATFORM == CW303
    PORTA.DIRSET = PIN5_bm | PIN6_bm;
    PORTA.OUTSET = PIN5_bm | PIN6_bm;
 #endif
}
 6de:	08 95       	ret

000006e0 <main>:

int main(void)
  {
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
 6e4:	a8 97       	sbiw	r28, 0x28	; 40
 6e6:	cd bf       	out	0x3d, r28	; 61
 6e8:	de bf       	out	0x3e, r29	; 62
    platform_init();
 6ea:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <platform_init>
  init_uart();
 6ee:	0e 94 89 02 	call	0x512	; 0x512 <init_uart0>
  trigger_setup();
 6f2:	11 e0       	ldi	r17, 0x01	; 1
 6f4:	10 93 01 06 	sts	0x0601, r17	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>

    char passwd[32];
    char correct_passwd[] = "h0px3";
 6f8:	86 e0       	ldi	r24, 0x06	; 6
 6fa:	ea e2       	ldi	r30, 0x2A	; 42
 6fc:	f1 e2       	ldi	r31, 0x21	; 33
 6fe:	de 01       	movw	r26, r28
 700:	91 96       	adiw	r26, 0x21	; 33
 702:	01 90       	ld	r0, Z+
 704:	0d 92       	st	X+, r0
 706:	8a 95       	dec	r24
 708:	e1 f7       	brne	.-8      	; 0x702 <main+0x22>

  while(1){

        my_puts("*****Safe-o-matic 3000 Booting...\n");
 70a:	84 e1       	ldi	r24, 0x14	; 20
 70c:	90 e2       	ldi	r25, 0x20	; 32
 70e:	0e 94 21 01 	call	0x242	; 0x242 <my_puts>
        //Print some fancy-sounding stuff so that attackers
        //will get scared and leave us alone
        my_puts("Aligning bits........[DONE]\n");
 712:	87 e3       	ldi	r24, 0x37	; 55
 714:	90 e2       	ldi	r25, 0x20	; 32
 716:	0e 94 21 01 	call	0x242	; 0x242 <my_puts>
        delay_2_ms();
 71a:	0e 94 09 01 	call	0x212	; 0x212 <delay_2_ms>
        my_puts("Checking Cesium RNG..[DONE]\n");
 71e:	84 e5       	ldi	r24, 0x54	; 84
 720:	90 e2       	ldi	r25, 0x20	; 32
 722:	0e 94 21 01 	call	0x242	; 0x242 <my_puts>
        delay_2_ms();
 726:	0e 94 09 01 	call	0x212	; 0x212 <delay_2_ms>
        my_puts("Masquerading flash...[DONE]\n");
 72a:	81 e7       	ldi	r24, 0x71	; 113
 72c:	90 e2       	ldi	r25, 0x20	; 32
 72e:	0e 94 21 01 	call	0x242	; 0x242 <my_puts>
        delay_2_ms();
 732:	0e 94 09 01 	call	0x212	; 0x212 <delay_2_ms>
        my_puts("Decrypting database..[DONE]\n");
 736:	8e e8       	ldi	r24, 0x8E	; 142
 738:	90 e2       	ldi	r25, 0x20	; 32
 73a:	0e 94 21 01 	call	0x242	; 0x242 <my_puts>
        delay_2_ms();
 73e:	0e 94 09 01 	call	0x212	; 0x212 <delay_2_ms>
        my_puts("\n\n");
 742:	8b ea       	ldi	r24, 0xAB	; 171
 744:	90 e2       	ldi	r25, 0x20	; 32
 746:	0e 94 21 01 	call	0x242	; 0x242 <my_puts>

        //Give them one last warning
        my_puts("WARNING: UNAUTHORIZED ACCESS WILL BE PUNISHED\n");
 74a:	8e ea       	ldi	r24, 0xAE	; 174
 74c:	90 e2       	ldi	r25, 0x20	; 32
 74e:	0e 94 21 01 	call	0x242	; 0x242 <my_puts>

        trigger_low();
 752:	10 93 06 06 	sts	0x0606, r17	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

        //Get password
        my_puts("Please enter password to continue: ");
 756:	8d ed       	ldi	r24, 0xDD	; 221
 758:	90 e2       	ldi	r25, 0x20	; 32
 75a:	0e 94 21 01 	call	0x242	; 0x242 <my_puts>
        my_read(passwd, 32);
 75e:	60 e2       	ldi	r22, 0x20	; 32
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	ce 01       	movw	r24, r28
 764:	01 96       	adiw	r24, 0x01	; 1
 766:	0e 94 2d 01 	call	0x25a	; 0x25a <my_read>

        uint8_t passbad = 0;

        trigger_high();
 76a:	10 93 05 06 	sts	0x0605, r17	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>

        for(uint8_t i = 0; i < sizeof(correct_passwd); i++){
 76e:	fe 01       	movw	r30, r28
 770:	31 96       	adiw	r30, 0x01	; 1
        trigger_high();
 772:	de 01       	movw	r26, r28
 774:	91 96       	adiw	r26, 0x21	; 33
        for(uint8_t i = 0; i < sizeof(correct_passwd); i++){
 776:	8c 2f       	mov	r24, r28
 778:	89 5d       	subi	r24, 0xD9	; 217
            if (correct_passwd[i] != passwd[i]){
 77a:	2d 91       	ld	r18, X+
 77c:	91 91       	ld	r25, Z+
 77e:	29 13       	cpse	r18, r25
 780:	1a c0       	rjmp	.+52     	; 0x7b6 <main+0xd6>
        for(uint8_t i = 0; i < sizeof(correct_passwd); i++){
 782:	8a 13       	cpse	r24, r26
 784:	fa cf       	rjmp	.-12     	; 0x77a <main+0x9a>
            delay_2_ms();
            delay_2_ms();
            my_puts("PASSWORD FAIL\n");
            led_error(1);
        } else {
            my_puts("Access granted, Welcome!\n");
 786:	80 e1       	ldi	r24, 0x10	; 16
 788:	91 e2       	ldi	r25, 0x21	; 33
 78a:	0e 94 21 01 	call	0x242	; 0x242 <my_puts>
 78e:	12 c0       	rjmp	.+36     	; 0x7b4 <main+0xd4>
            for(volatile int i = 0; i < wait; i++){
 790:	8f a1       	ldd	r24, Y+39	; 0x27
 792:	98 a5       	ldd	r25, Y+40	; 0x28
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	8f a3       	std	Y+39, r24	; 0x27
 798:	98 a7       	std	Y+40, r25	; 0x28
 79a:	8f a1       	ldd	r24, Y+39	; 0x27
 79c:	98 a5       	ldd	r25, Y+40	; 0x28
 79e:	82 17       	cp	r24, r18
 7a0:	93 07       	cpc	r25, r19
 7a2:	b4 f3       	brlt	.-20     	; 0x790 <main+0xb0>
            delay_2_ms();
 7a4:	0e 94 09 01 	call	0x212	; 0x212 <delay_2_ms>
            delay_2_ms();
 7a8:	0e 94 09 01 	call	0x212	; 0x212 <delay_2_ms>
            my_puts("PASSWORD FAIL\n");
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	91 e2       	ldi	r25, 0x21	; 33
 7b0:	0e 94 21 01 	call	0x242	; 0x242 <my_puts>
            led_ok(1);
        }

        //All done;
        while(1);
 7b4:	ff cf       	rjmp	.-2      	; 0x7b4 <main+0xd4>
             int wait = rand() % 100000; //% 100000 can be removed for xmega
 7b6:	0e 94 42 04 	call	0x884	; 0x884 <rand>
 7ba:	9c 01       	movw	r18, r24
            for(volatile int i = 0; i < wait; i++){
 7bc:	1f a2       	std	Y+39, r1	; 0x27
 7be:	18 a6       	std	Y+40, r1	; 0x28
 7c0:	ec cf       	rjmp	.-40     	; 0x79a <main+0xba>

000007c2 <do_rand>:
 7c2:	cf 92       	push	r12
 7c4:	df 92       	push	r13
 7c6:	ef 92       	push	r14
 7c8:	ff 92       	push	r15
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
 7d2:	2a 97       	sbiw	r28, 0x0a	; 10
 7d4:	cd bf       	out	0x3d, r28	; 61
 7d6:	de bf       	out	0x3e, r29	; 62
 7d8:	89 87       	std	Y+9, r24	; 0x09
 7da:	9a 87       	std	Y+10, r25	; 0x0a
 7dc:	a9 85       	ldd	r26, Y+9	; 0x09
 7de:	ba 85       	ldd	r27, Y+10	; 0x0a
 7e0:	2d 91       	ld	r18, X+
 7e2:	3d 91       	ld	r19, X+
 7e4:	4d 91       	ld	r20, X+
 7e6:	5c 91       	ld	r21, X
 7e8:	29 83       	std	Y+1, r18	; 0x01
 7ea:	3a 83       	std	Y+2, r19	; 0x02
 7ec:	4b 83       	std	Y+3, r20	; 0x03
 7ee:	5c 83       	std	Y+4, r21	; 0x04
 7f0:	23 2b       	or	r18, r19
 7f2:	24 2b       	or	r18, r20
 7f4:	25 2b       	or	r18, r21
 7f6:	41 f4       	brne	.+16     	; 0x808 <do_rand+0x46>
 7f8:	24 e2       	ldi	r18, 0x24	; 36
 7fa:	39 ed       	ldi	r19, 0xD9	; 217
 7fc:	4b e5       	ldi	r20, 0x5B	; 91
 7fe:	57 e0       	ldi	r21, 0x07	; 7
 800:	29 83       	std	Y+1, r18	; 0x01
 802:	3a 83       	std	Y+2, r19	; 0x02
 804:	4b 83       	std	Y+3, r20	; 0x03
 806:	5c 83       	std	Y+4, r21	; 0x04
 808:	69 81       	ldd	r22, Y+1	; 0x01
 80a:	7a 81       	ldd	r23, Y+2	; 0x02
 80c:	8b 81       	ldd	r24, Y+3	; 0x03
 80e:	9c 81       	ldd	r25, Y+4	; 0x04
 810:	2d e1       	ldi	r18, 0x1D	; 29
 812:	33 ef       	ldi	r19, 0xF3	; 243
 814:	41 e0       	ldi	r20, 0x01	; 1
 816:	50 e0       	ldi	r21, 0x00	; 0
 818:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__divmodsi4>
 81c:	69 01       	movw	r12, r18
 81e:	7a 01       	movw	r14, r20
 820:	a7 ea       	ldi	r26, 0xA7	; 167
 822:	b1 e4       	ldi	r27, 0x41	; 65
 824:	9b 01       	movw	r18, r22
 826:	ac 01       	movw	r20, r24
 828:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__muluhisi3>
 82c:	69 83       	std	Y+1, r22	; 0x01
 82e:	7a 83       	std	Y+2, r23	; 0x02
 830:	8b 83       	std	Y+3, r24	; 0x03
 832:	9c 83       	std	Y+4, r25	; 0x04
 834:	ac ee       	ldi	r26, 0xEC	; 236
 836:	b4 ef       	ldi	r27, 0xF4	; 244
 838:	a7 01       	movw	r20, r14
 83a:	96 01       	movw	r18, r12
 83c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulohisi3>
 840:	9b 01       	movw	r18, r22
 842:	ac 01       	movw	r20, r24
 844:	89 81       	ldd	r24, Y+1	; 0x01
 846:	9a 81       	ldd	r25, Y+2	; 0x02
 848:	ab 81       	ldd	r26, Y+3	; 0x03
 84a:	bc 81       	ldd	r27, Y+4	; 0x04
 84c:	82 0f       	add	r24, r18
 84e:	93 1f       	adc	r25, r19
 850:	a4 1f       	adc	r26, r20
 852:	b5 1f       	adc	r27, r21
 854:	b7 ff       	sbrs	r27, 7
 856:	03 c0       	rjmp	.+6      	; 0x85e <do_rand+0x9c>
 858:	01 97       	sbiw	r24, 0x01	; 1
 85a:	a1 09       	sbc	r26, r1
 85c:	b0 48       	sbci	r27, 0x80	; 128
 85e:	e9 85       	ldd	r30, Y+9	; 0x09
 860:	fa 85       	ldd	r31, Y+10	; 0x0a
 862:	80 83       	st	Z, r24
 864:	91 83       	std	Z+1, r25	; 0x01
 866:	a2 83       	std	Z+2, r26	; 0x02
 868:	b3 83       	std	Z+3, r27	; 0x03
 86a:	9f 77       	andi	r25, 0x7F	; 127
 86c:	2a 96       	adiw	r28, 0x0a	; 10
 86e:	cd bf       	out	0x3d, r28	; 61
 870:	de bf       	out	0x3e, r29	; 62
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	ff 90       	pop	r15
 878:	ef 90       	pop	r14
 87a:	df 90       	pop	r13
 87c:	cf 90       	pop	r12
 87e:	08 95       	ret

00000880 <rand_r>:
 880:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <do_rand>

00000884 <rand>:
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	90 e2       	ldi	r25, 0x20	; 32
 888:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <do_rand>

0000088c <srand>:
 88c:	b0 e0       	ldi	r27, 0x00	; 0
 88e:	a0 e0       	ldi	r26, 0x00	; 0
 890:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <next>
 894:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <next+0x1>
 898:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <next+0x2>
 89c:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <next+0x3>
 8a0:	08 95       	ret

000008a2 <__divmodsi4>:
 8a2:	05 2e       	mov	r0, r21
 8a4:	97 fb       	bst	r25, 7
 8a6:	1e f4       	brtc	.+6      	; 0x8ae <__divmodsi4+0xc>
 8a8:	00 94       	com	r0
 8aa:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__negsi2>
 8ae:	57 fd       	sbrc	r21, 7
 8b0:	07 d0       	rcall	.+14     	; 0x8c0 <__divmodsi4_neg2>
 8b2:	0e 94 83 04 	call	0x906	; 0x906 <__udivmodsi4>
 8b6:	07 fc       	sbrc	r0, 7
 8b8:	03 d0       	rcall	.+6      	; 0x8c0 <__divmodsi4_neg2>
 8ba:	4e f4       	brtc	.+18     	; 0x8ce <__divmodsi4_exit>
 8bc:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__negsi2>

000008c0 <__divmodsi4_neg2>:
 8c0:	50 95       	com	r21
 8c2:	40 95       	com	r20
 8c4:	30 95       	com	r19
 8c6:	21 95       	neg	r18
 8c8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ca:	4f 4f       	sbci	r20, 0xFF	; 255
 8cc:	5f 4f       	sbci	r21, 0xFF	; 255

000008ce <__divmodsi4_exit>:
 8ce:	08 95       	ret

000008d0 <__negsi2>:
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	08 95       	ret

000008e0 <__muluhisi3>:
 8e0:	0e 94 a5 04 	call	0x94a	; 0x94a <__umulhisi3>
 8e4:	a5 9f       	mul	r26, r21
 8e6:	90 0d       	add	r25, r0
 8e8:	b4 9f       	mul	r27, r20
 8ea:	90 0d       	add	r25, r0
 8ec:	a4 9f       	mul	r26, r20
 8ee:	80 0d       	add	r24, r0
 8f0:	91 1d       	adc	r25, r1
 8f2:	11 24       	eor	r1, r1
 8f4:	08 95       	ret

000008f6 <__mulshisi3>:
 8f6:	b7 ff       	sbrs	r27, 7
 8f8:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__muluhisi3>

000008fc <__mulohisi3>:
 8fc:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__muluhisi3>
 900:	82 1b       	sub	r24, r18
 902:	93 0b       	sbc	r25, r19
 904:	08 95       	ret

00000906 <__udivmodsi4>:
 906:	a1 e2       	ldi	r26, 0x21	; 33
 908:	1a 2e       	mov	r1, r26
 90a:	aa 1b       	sub	r26, r26
 90c:	bb 1b       	sub	r27, r27
 90e:	fd 01       	movw	r30, r26
 910:	0d c0       	rjmp	.+26     	; 0x92c <__udivmodsi4_ep>

00000912 <__udivmodsi4_loop>:
 912:	aa 1f       	adc	r26, r26
 914:	bb 1f       	adc	r27, r27
 916:	ee 1f       	adc	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	a2 17       	cp	r26, r18
 91c:	b3 07       	cpc	r27, r19
 91e:	e4 07       	cpc	r30, r20
 920:	f5 07       	cpc	r31, r21
 922:	20 f0       	brcs	.+8      	; 0x92c <__udivmodsi4_ep>
 924:	a2 1b       	sub	r26, r18
 926:	b3 0b       	sbc	r27, r19
 928:	e4 0b       	sbc	r30, r20
 92a:	f5 0b       	sbc	r31, r21

0000092c <__udivmodsi4_ep>:
 92c:	66 1f       	adc	r22, r22
 92e:	77 1f       	adc	r23, r23
 930:	88 1f       	adc	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	1a 94       	dec	r1
 936:	69 f7       	brne	.-38     	; 0x912 <__udivmodsi4_loop>
 938:	60 95       	com	r22
 93a:	70 95       	com	r23
 93c:	80 95       	com	r24
 93e:	90 95       	com	r25
 940:	9b 01       	movw	r18, r22
 942:	ac 01       	movw	r20, r24
 944:	bd 01       	movw	r22, r26
 946:	cf 01       	movw	r24, r30
 948:	08 95       	ret

0000094a <__umulhisi3>:
 94a:	a2 9f       	mul	r26, r18
 94c:	b0 01       	movw	r22, r0
 94e:	b3 9f       	mul	r27, r19
 950:	c0 01       	movw	r24, r0
 952:	a3 9f       	mul	r26, r19
 954:	70 0d       	add	r23, r0
 956:	81 1d       	adc	r24, r1
 958:	11 24       	eor	r1, r1
 95a:	91 1d       	adc	r25, r1
 95c:	b2 9f       	mul	r27, r18
 95e:	70 0d       	add	r23, r0
 960:	81 1d       	adc	r24, r1
 962:	11 24       	eor	r1, r1
 964:	91 1d       	adc	r25, r1
 966:	08 95       	ret

00000968 <_exit>:
 968:	f8 94       	cli

0000096a <__stop_program>:
 96a:	ff cf       	rjmp	.-2      	; 0x96a <__stop_program>
