
simpleserial-aes-CWLITEXMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000022c  00802000  00000ca2  00000d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000126  0080222c  0080222c  00000f62  2**0
                  ALLOC
  3 .comment      00000024  00000000  00000000  00000f62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000148  00000000  00000000  00000fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000455b  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00002c3a  00000000  00000000  0000566b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   000025a0  00000000  00000000  000082a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000500  00000000  00000000  0000a848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000020d9  00000000  00000000  0000ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000154a  00000000  00000000  0000ce21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000090  00000000  00000000  0000e36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__ctors_end>
   4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
   8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
   c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  10:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  14:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  18:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  1c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  20:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  24:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  28:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  2c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  30:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  34:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  38:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  3c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  40:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  44:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  48:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  4c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  50:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  54:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  58:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  5c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  60:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  64:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  68:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  6c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  70:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  74:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  78:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  7c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  80:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  84:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  88:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  8c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  90:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  94:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  98:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  9c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  a0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  a4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  a8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  ac:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  b0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  b4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  b8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  bc:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  c0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  c4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  c8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  cc:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  d0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  d4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  d8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  dc:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  e0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  e4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  e8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  ec:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  f0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  f4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  f8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  fc:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 100:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 104:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 108:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 10c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 110:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 114:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 118:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 11c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 120:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 124:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 128:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 12c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 130:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 134:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 138:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 13c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 140:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 144:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 148:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 14c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 150:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 154:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 158:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 15c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 160:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 164:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 168:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 16c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 170:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 174:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 178:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 17c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 180:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 184:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 188:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 18c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 190:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 194:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 198:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 19c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 1a0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 1a4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 1a8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 1ac:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 1b0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 1b4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 1b8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 1bc:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 1c0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
 1c4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>

000001c8 <__trampolines_start>:
 1c8:	0c 94 11 01 	jmp	0x222	; 0x222 <reset>
 1cc:	0c 94 17 01 	jmp	0x22e	; 0x22e <get_key>
 1d0:	0c 94 42 01 	jmp	0x284	; 0x284 <check_version>
 1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <get_pt>
 1d8:	0c 94 13 01 	jmp	0x226	; 0x226 <get_mask>

000001dc <__ctors_end>:
 1dc:	11 24       	eor	r1, r1
 1de:	1f be       	out	0x3f, r1	; 63
 1e0:	cf ef       	ldi	r28, 0xFF	; 255
 1e2:	cd bf       	out	0x3d, r28	; 61
 1e4:	df e3       	ldi	r29, 0x3F	; 63
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	00 e0       	ldi	r16, 0x00	; 0
 1ea:	0c bf       	out	0x3c, r16	; 60

000001ec <__do_copy_data>:
 1ec:	12 e2       	ldi	r17, 0x22	; 34
 1ee:	a0 e0       	ldi	r26, 0x00	; 0
 1f0:	b0 e2       	ldi	r27, 0x20	; 32
 1f2:	e2 ea       	ldi	r30, 0xA2	; 162
 1f4:	fc e0       	ldi	r31, 0x0C	; 12
 1f6:	00 e0       	ldi	r16, 0x00	; 0
 1f8:	0b bf       	out	0x3b, r16	; 59
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <__do_copy_data+0x14>
 1fc:	07 90       	elpm	r0, Z+
 1fe:	0d 92       	st	X+, r0
 200:	ac 32       	cpi	r26, 0x2C	; 44
 202:	b1 07       	cpc	r27, r17
 204:	d9 f7       	brne	.-10     	; 0x1fc <__do_copy_data+0x10>

00000206 <__do_clear_bss>:
 206:	23 e2       	ldi	r18, 0x23	; 35
 208:	ac e2       	ldi	r26, 0x2C	; 44
 20a:	b2 e2       	ldi	r27, 0x22	; 34
 20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
 20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
 210:	a2 35       	cpi	r26, 0x52	; 82
 212:	b2 07       	cpc	r27, r18
 214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
 216:	0e 94 01 06 	call	0xc02	; 0xc02 <main>
 21a:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <_exit>

0000021e <__bad_interrupt>:
 21e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000222 <reset>:

uint8_t reset(uint8_t* x)
{
    // Reset key here if needed
	return 0x00;
}
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret

00000226 <get_mask>:
  aes_indep_mask(m);
 226:	0e 94 00 06 	call	0xc00	; 0xc00 <aes_indep_mask>
}
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret

0000022e <get_key>:
	aes_indep_key(k);
 22e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <aes_indep_key>
}
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	08 95       	ret

00000236 <get_pt>:
{
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	d8 2f       	mov	r29, r24
 242:	c9 2f       	mov	r28, r25
    aes_indep_enc_pretrigger(pt);
 244:	0e 94 fe 05 	call	0xbfc	; 0xbfc <aes_indep_enc_pretrigger>
	trigger_high();
 248:	00 e0       	ldi	r16, 0x00	; 0
 24a:	16 e0       	ldi	r17, 0x06	; 6
 24c:	ff 24       	eor	r15, r15
 24e:	f3 94       	inc	r15
 250:	f8 01       	movw	r30, r16
 252:	f5 82       	std	Z+5, r15	; 0x05
	aes_indep_enc(pt); /* encrypting the data block */
 254:	8d 2f       	mov	r24, r29
 256:	9c 2f       	mov	r25, r28
 258:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <aes_indep_enc>
	trigger_low();
 25c:	f8 01       	movw	r30, r16
 25e:	f6 82       	std	Z+6, r15	; 0x06
    aes_indep_enc_posttrigger(pt);
 260:	8d 2f       	mov	r24, r29
 262:	9c 2f       	mov	r25, r28
 264:	0e 94 ff 05 	call	0xbfe	; 0xbfe <aes_indep_enc_posttrigger>
	simpleserial_put('r', 16, pt);
 268:	4d 2f       	mov	r20, r29
 26a:	5c 2f       	mov	r21, r28
 26c:	60 e1       	ldi	r22, 0x10	; 16
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	82 e7       	ldi	r24, 0x72	; 114
 272:	0e 94 b3 01 	call	0x366	; 0x366 <simpleserial_put>
}
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	08 95       	ret

00000284 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t* v)
{
	return SS_VER;
}
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	08 95       	ret

00000288 <hex_decode>:
{
 288:	9c 01       	movw	r18, r24
 28a:	fa 01       	movw	r30, r20
	for(int i = 0; i < len; i++)
 28c:	db 01       	movw	r26, r22
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	42 17       	cp	r20, r18
 294:	53 07       	cpc	r21, r19
 296:	1c f0       	brlt	.+6      	; 0x29e <hex_decode+0x16>
	return 0;
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	80 e0       	ldi	r24, 0x00	; 0
}
 29c:	08 95       	ret
		char n_hi = ascii_buf[2*i];
 29e:	8c 91       	ld	r24, X
		char n_lo = ascii_buf[2*i+1];
 2a0:	11 96       	adiw	r26, 0x01	; 1
 2a2:	9c 91       	ld	r25, X
 2a4:	11 97       	sbiw	r26, 0x01	; 1
		if(n_lo >= '0' && n_lo <= '9')
 2a6:	60 ed       	ldi	r22, 0xD0	; 208
 2a8:	69 0f       	add	r22, r25
 2aa:	6a 30       	cpi	r22, 0x0A	; 10
 2ac:	78 f4       	brcc	.+30     	; 0x2cc <hex_decode+0x44>
			data_buf[i] = n_lo - '0';
 2ae:	60 83       	st	Z, r22
		if(n_hi >= '0' && n_hi <= '9')
 2b0:	90 ed       	ldi	r25, 0xD0	; 208
 2b2:	98 0f       	add	r25, r24
 2b4:	9a 30       	cpi	r25, 0x0A	; 10
 2b6:	d0 f4       	brcc	.+52     	; 0x2ec <hex_decode+0x64>
			data_buf[i] |= (n_hi - '0') << 4;
 2b8:	82 95       	swap	r24
 2ba:	80 7f       	andi	r24, 0xF0	; 240
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 2bc:	90 81       	ld	r25, Z
 2be:	89 2b       	or	r24, r25
 2c0:	80 83       	st	Z, r24
	for(int i = 0; i < len; i++)
 2c2:	4f 5f       	subi	r20, 0xFF	; 255
 2c4:	5f 4f       	sbci	r21, 0xFF	; 255
 2c6:	31 96       	adiw	r30, 0x01	; 1
 2c8:	12 96       	adiw	r26, 0x02	; 2
 2ca:	e3 cf       	rjmp	.-58     	; 0x292 <hex_decode+0xa>
		else if(n_lo >= 'A' && n_lo <= 'F')
 2cc:	6f eb       	ldi	r22, 0xBF	; 191
 2ce:	69 0f       	add	r22, r25
 2d0:	66 30       	cpi	r22, 0x06	; 6
 2d2:	18 f4       	brcc	.+6      	; 0x2da <hex_decode+0x52>
			data_buf[i] = n_lo - 'A' + 10;
 2d4:	97 53       	subi	r25, 0x37	; 55
			data_buf[i] = n_lo - 'a' + 10;
 2d6:	90 83       	st	Z, r25
 2d8:	eb cf       	rjmp	.-42     	; 0x2b0 <hex_decode+0x28>
		else if(n_lo >= 'a' && n_lo <= 'f')
 2da:	6f e9       	ldi	r22, 0x9F	; 159
 2dc:	69 0f       	add	r22, r25
 2de:	66 30       	cpi	r22, 0x06	; 6
 2e0:	18 f0       	brcs	.+6      	; 0x2e8 <hex_decode+0x60>
			return 1;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	08 95       	ret
			data_buf[i] = n_lo - 'a' + 10;
 2e8:	97 55       	subi	r25, 0x57	; 87
 2ea:	f5 cf       	rjmp	.-22     	; 0x2d6 <hex_decode+0x4e>
		else if(n_hi >= 'A' && n_hi <= 'F')
 2ec:	9f eb       	ldi	r25, 0xBF	; 191
 2ee:	98 0f       	add	r25, r24
 2f0:	96 30       	cpi	r25, 0x06	; 6
 2f2:	40 f4       	brcc	.+16     	; 0x304 <hex_decode+0x7c>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 2f4:	87 53       	subi	r24, 0x37	; 55
 2f6:	99 0b       	sbc	r25, r25
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 2f8:	64 e0       	ldi	r22, 0x04	; 4
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e1 f7       	brne	.-8      	; 0x2fa <hex_decode+0x72>
 302:	dc cf       	rjmp	.-72     	; 0x2bc <hex_decode+0x34>
		else if(n_hi >= 'a' && n_hi <= 'f')
 304:	9f e9       	ldi	r25, 0x9F	; 159
 306:	98 0f       	add	r25, r24
 308:	96 30       	cpi	r25, 0x06	; 6
 30a:	58 f7       	brcc	.-42     	; 0x2e2 <hex_decode+0x5a>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 30c:	87 55       	subi	r24, 0x57	; 87
 30e:	99 0b       	sbc	r25, r25
 310:	f3 cf       	rjmp	.-26     	; 0x2f8 <hex_decode+0x70>

00000312 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands >= MAX_SS_CMDS)
 312:	20 91 2c 22 	lds	r18, 0x222C	; 0x80222c <num_commands>
 316:	30 91 2d 22 	lds	r19, 0x222D	; 0x80222d <num_commands+0x1>
 31a:	20 31       	cpi	r18, 0x10	; 16
 31c:	31 05       	cpc	r19, r1
 31e:	cc f4       	brge	.+50     	; 0x352 <simpleserial_addcmd+0x40>
		return 1;

	if(len >= MAX_SS_LEN)
 320:	60 34       	cpi	r22, 0x40	; 64
 322:	71 05       	cpc	r23, r1
 324:	b0 f4       	brcc	.+44     	; 0x352 <simpleserial_addcmd+0x40>
		return 1;

	commands[num_commands].c   = c;
 326:	95 e0       	ldi	r25, 0x05	; 5
 328:	92 9f       	mul	r25, r18
 32a:	f0 01       	movw	r30, r0
 32c:	93 9f       	mul	r25, r19
 32e:	f0 0d       	add	r31, r0
 330:	11 24       	eor	r1, r1
 332:	e2 5d       	subi	r30, 0xD2	; 210
 334:	fd 4d       	sbci	r31, 0xDD	; 221
 336:	80 83       	st	Z, r24
	commands[num_commands].len = len;
 338:	61 83       	std	Z+1, r22	; 0x01
 33a:	72 83       	std	Z+2, r23	; 0x02
	commands[num_commands].fp  = fp;
 33c:	43 83       	std	Z+3, r20	; 0x03
 33e:	54 83       	std	Z+4, r21	; 0x04
	num_commands++;
 340:	2f 5f       	subi	r18, 0xFF	; 255
 342:	3f 4f       	sbci	r19, 0xFF	; 255
 344:	20 93 2c 22 	sts	0x222C, r18	; 0x80222c <num_commands>
 348:	30 93 2d 22 	sts	0x222D, r19	; 0x80222d <num_commands+0x1>

	return 0;
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret
		return 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
}
 356:	08 95       	ret

00000358 <simpleserial_init>:
	simpleserial_addcmd('v', 0, check_version);
 358:	42 e4       	ldi	r20, 0x42	; 66
 35a:	51 e0       	ldi	r21, 0x01	; 1
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	86 e7       	ldi	r24, 0x76	; 118
 362:	0c 94 89 01 	jmp	0x312	; 0x312 <simpleserial_addcmd>

00000366 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, int size, uint8_t* output)
{
 366:	ef 92       	push	r14
 368:	ff 92       	push	r15
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	8b 01       	movw	r16, r22
 374:	7a 01       	movw	r14, r20
	// Write first character
	putch(c);
 376:	0e 94 b5 02 	call	0x56a	; 0x56a <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 37a:	e7 01       	movw	r28, r14
 37c:	f1 2c       	mov	r15, r1
 37e:	e1 2c       	mov	r14, r1
 380:	e0 16       	cp	r14, r16
 382:	f1 06       	cpc	r15, r17
 384:	4c f0       	brlt	.+18     	; 0x398 <simpleserial_put+0x32>
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 386:	8a e0       	ldi	r24, 0x0A	; 10
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
	putch('\n');
 394:	0c 94 b5 02 	jmp	0x56a	; 0x56a <output_ch_0>
		putch(hex_lookup[output[i] >> 4 ]);
 398:	e9 91       	ld	r30, Y+
 39a:	e2 95       	swap	r30
 39c:	ef 70       	andi	r30, 0x0F	; 15
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	e5 5f       	subi	r30, 0xF5	; 245
 3a2:	fd 4d       	sbci	r31, 0xDD	; 221
 3a4:	80 81       	ld	r24, Z
 3a6:	0e 94 b5 02 	call	0x56a	; 0x56a <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
 3aa:	fe 01       	movw	r30, r28
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	e0 81       	ld	r30, Z
 3b0:	ef 70       	andi	r30, 0x0F	; 15
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	e5 5f       	subi	r30, 0xF5	; 245
 3b6:	fd 4d       	sbci	r31, 0xDD	; 221
 3b8:	80 81       	ld	r24, Z
 3ba:	0e 94 b5 02 	call	0x56a	; 0x56a <output_ch_0>
	for(int i = 0; i < size; i++)
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	e8 1a       	sub	r14, r24
 3c2:	f8 0a       	sbc	r15, r24
 3c4:	dd cf       	rjmp	.-70     	; 0x380 <simpleserial_put+0x1a>

000003c6 <simpleserial_get>:
{
 3c6:	8f 92       	push	r8
 3c8:	9f 92       	push	r9
 3ca:	af 92       	push	r10
 3cc:	bf 92       	push	r11
 3ce:	cf 92       	push	r12
 3d0:	df 92       	push	r13
 3d2:	ef 92       	push	r14
 3d4:	ff 92       	push	r15
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	c1 5c       	subi	r28, 0xC1	; 193
 3e4:	d1 09       	sbc	r29, r1
 3e6:	cd bf       	out	0x3d, r28	; 61
 3e8:	de bf       	out	0x3e, r29	; 62
	c = getch();
 3ea:	0e 94 ae 02 	call	0x55c	; 0x55c <input_ch_0>
	for(cmd = 0; cmd < num_commands; cmd++)
 3ee:	40 91 2c 22 	lds	r20, 0x222C	; 0x80222c <num_commands>
 3f2:	50 91 2d 22 	lds	r21, 0x222D	; 0x80222d <num_commands+0x1>
 3f6:	2e e2       	ldi	r18, 0x2E	; 46
 3f8:	32 e2       	ldi	r19, 0x22	; 34
 3fa:	10 e0       	ldi	r17, 0x00	; 0
 3fc:	00 e0       	ldi	r16, 0x00	; 0
 3fe:	04 17       	cp	r16, r20
 400:	15 07       	cpc	r17, r21
 402:	0c f4       	brge	.+2      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 404:	5e c0       	rjmp	.+188    	; 0x4c2 <__FUSE_REGION_LENGTH__+0xc2>
	if(cmd == num_commands)
 406:	40 17       	cp	r20, r16
 408:	51 07       	cpc	r21, r17
 40a:	09 f4       	brne	.+2      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 40c:	49 c0       	rjmp	.+146    	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
 40e:	9e 01       	movw	r18, r28
 410:	2f 5f       	subi	r18, 0xFF	; 255
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	79 01       	movw	r14, r18
	for(cmd = 0; cmd < num_commands; cmd++)
 416:	d1 2c       	mov	r13, r1
 418:	c1 2c       	mov	r12, r1
 41a:	49 01       	movw	r8, r18
	for(int i = 0; i < 2*commands[cmd].len; i++)
 41c:	25 e0       	ldi	r18, 0x05	; 5
 41e:	20 9f       	mul	r18, r16
 420:	c0 01       	movw	r24, r0
 422:	21 9f       	mul	r18, r17
 424:	90 0d       	add	r25, r0
 426:	11 24       	eor	r1, r1
 428:	dc 01       	movw	r26, r24
 42a:	a1 5d       	subi	r26, 0xD1	; 209
 42c:	bd 4d       	sbci	r27, 0xDD	; 221
 42e:	5d 01       	movw	r10, r26
 430:	d5 01       	movw	r26, r10
 432:	8d 91       	ld	r24, X+
 434:	9c 91       	ld	r25, X
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	c8 16       	cp	r12, r24
 43c:	d9 06       	cpc	r13, r25
 43e:	08 f4       	brcc	.+2      	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 440:	4b c0       	rjmp	.+150    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
	c = getch();
 442:	0e 94 ae 02 	call	0x55c	; 0x55c <input_ch_0>
	if(c != '\n' && c != '\r')
 446:	8a 30       	cpi	r24, 0x0A	; 10
 448:	11 f0       	breq	.+4      	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
 44a:	8d 30       	cpi	r24, 0x0D	; 13
 44c:	49 f5       	brne	.+82     	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 44e:	25 e0       	ldi	r18, 0x05	; 5
 450:	20 9f       	mul	r18, r16
 452:	c0 01       	movw	r24, r0
 454:	21 9f       	mul	r18, r17
 456:	90 0d       	add	r25, r0
 458:	11 24       	eor	r1, r1
 45a:	8c 01       	movw	r16, r24
 45c:	02 5d       	subi	r16, 0xD2	; 210
 45e:	1d 4d       	sbci	r17, 0xDD	; 221
 460:	ae 01       	movw	r20, r28
 462:	4f 57       	subi	r20, 0x7F	; 127
 464:	5f 4f       	sbci	r21, 0xFF	; 255
 466:	b4 01       	movw	r22, r8
 468:	f8 01       	movw	r30, r16
 46a:	81 81       	ldd	r24, Z+1	; 0x01
 46c:	92 81       	ldd	r25, Z+2	; 0x02
 46e:	0e 94 44 01 	call	0x288	; 0x288 <hex_decode>
 472:	89 2b       	or	r24, r25
 474:	a9 f4       	brne	.+42     	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
	ret[0] = commands[cmd].fp(data_buf);
 476:	d8 01       	movw	r26, r16
 478:	13 96       	adiw	r26, 0x03	; 3
 47a:	ed 91       	ld	r30, X+
 47c:	fc 91       	ld	r31, X
 47e:	ce 01       	movw	r24, r28
 480:	8f 57       	subi	r24, 0x7F	; 127
 482:	9f 4f       	sbci	r25, 0xFF	; 255
 484:	19 95       	eicall
 486:	cf 53       	subi	r28, 0x3F	; 63
 488:	df 4f       	sbci	r29, 0xFF	; 255
 48a:	88 83       	st	Y, r24
 48c:	c1 5c       	subi	r28, 0xC1	; 193
 48e:	d0 40       	sbci	r29, 0x00	; 0
	simpleserial_put('z', 1, ret);
 490:	ae 01       	movw	r20, r28
 492:	4f 53       	subi	r20, 0x3F	; 63
 494:	5f 4f       	sbci	r21, 0xFF	; 255
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	8a e7       	ldi	r24, 0x7A	; 122
 49c:	0e 94 b3 01 	call	0x366	; 0x366 <simpleserial_put>
}
 4a0:	cf 53       	subi	r28, 0x3F	; 63
 4a2:	df 4f       	sbci	r29, 0xFF	; 255
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	df 90       	pop	r13
 4b6:	cf 90       	pop	r12
 4b8:	bf 90       	pop	r11
 4ba:	af 90       	pop	r10
 4bc:	9f 90       	pop	r9
 4be:	8f 90       	pop	r8
 4c0:	08 95       	ret
		if(commands[cmd].c == c)
 4c2:	2b 5f       	subi	r18, 0xFB	; 251
 4c4:	3f 4f       	sbci	r19, 0xFF	; 255
 4c6:	f9 01       	movw	r30, r18
 4c8:	35 97       	sbiw	r30, 0x05	; 5
 4ca:	90 81       	ld	r25, Z
 4cc:	98 17       	cp	r25, r24
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
 4d0:	9e cf       	rjmp	.-196    	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
	for(cmd = 0; cmd < num_commands; cmd++)
 4d2:	0f 5f       	subi	r16, 0xFF	; 255
 4d4:	1f 4f       	sbci	r17, 0xFF	; 255
 4d6:	93 cf       	rjmp	.-218    	; 0x3fe <simpleserial_get+0x38>
		c = getch();
 4d8:	0e 94 ae 02 	call	0x55c	; 0x55c <input_ch_0>
		if(c == '\n' || c == '\r')
 4dc:	8a 30       	cpi	r24, 0x0A	; 10
 4de:	01 f3       	breq	.-64     	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
 4e0:	8d 30       	cpi	r24, 0x0D	; 13
 4e2:	f1 f2       	breq	.-68     	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
		ascii_buf[i] = c;
 4e4:	f7 01       	movw	r30, r14
 4e6:	81 93       	st	Z+, r24
 4e8:	7f 01       	movw	r14, r30
	for(int i = 0; i < 2*commands[cmd].len; i++)
 4ea:	ff ef       	ldi	r31, 0xFF	; 255
 4ec:	cf 1a       	sub	r12, r31
 4ee:	df 0a       	sbc	r13, r31
 4f0:	9f cf       	rjmp	.-194    	; 0x430 <__FUSE_REGION_LENGTH__+0x30>

000004f2 <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
 4f2:	e0 e4       	ldi	r30, 0x40	; 64
 4f4:	f6 e0       	ldi	r31, 0x06	; 6
 4f6:	88 e0       	ldi	r24, 0x08	; 8
 4f8:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
 4fa:	84 e0       	ldi	r24, 0x04	; 4
 4fc:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 4fe:	e0 ea       	ldi	r30, 0xA0	; 160
 500:	f8 e0       	ldi	r31, 0x08	; 8
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	85 83       	std	Z+5, r24	; 0x05
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (1/(16*(((I/O clock frequency)/Baudrate)-1)
	 *                 = 12
	 */
	USART_Baudrate_Set(&USART, 11, 0);
 506:	8b e0       	ldi	r24, 0x0B	; 11
 508:	86 83       	std	Z+6, r24	; 0x06
 50a:	17 82       	std	Z+7, r1	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 50c:	84 81       	ldd	r24, Z+4	; 0x04
 50e:	80 61       	ori	r24, 0x10	; 16
 510:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
 512:	84 81       	ldd	r24, Z+4	; 0x04
 514:	88 60       	ori	r24, 0x08	; 8
 516:	84 83       	std	Z+4, r24	; 0x04
   }
 518:	08 95       	ret

0000051a <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	0f 92       	push	r0
 520:	0f 92       	push	r0
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
 526:	fc 01       	movw	r30, r24
 528:	69 83       	std	Y+1, r22	; 0x01
 52a:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	80 e0       	ldi	r24, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
 530:	29 81       	ldd	r18, Y+1	; 0x01
 532:	3a 81       	ldd	r19, Y+2	; 0x02
 534:	28 17       	cp	r18, r24
 536:	39 07       	cpc	r19, r25
 538:	11 f4       	brne	.+4      	; 0x53e <input_ch_w_timeout_0+0x24>
			return BYTE_REC;
			}
		timeout_counter++;
		}
		
	return TIMEOUT;
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	08 c0       	rjmp	.+16     	; 0x54e <input_ch_w_timeout_0+0x34>
		if (USART_IsRXComplete(&USART))
 53e:	20 91 a1 08 	lds	r18, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 542:	27 ff       	sbrs	r18, 7
 544:	09 c0       	rjmp	.+18     	; 0x558 <input_ch_w_timeout_0+0x3e>
			*data = USART_GetChar(&USART);
 546:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 54a:	80 83       	st	Z, r24
			return BYTE_REC;
 54c:	81 e0       	ldi	r24, 0x01	; 1
	}
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret
		timeout_counter++;
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	ea cf       	rjmp	.-44     	; 0x530 <input_ch_w_timeout_0+0x16>

0000055c <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
 55c:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 560:	87 ff       	sbrs	r24, 7
 562:	fc cf       	rjmp	.-8      	; 0x55c <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
 564:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	}
 568:	08 95       	ret

0000056a <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
 56a:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 56e:	95 ff       	sbrs	r25, 5
 570:	fc cf       	rjmp	.-8      	; 0x56a <output_ch_0>
	USART_PutChar(&USART, data);
 572:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	return;
 576:	08 95       	ret

00000578 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 578:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 57a:	60 83       	st	Z, r22
 57c:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 57e:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 580:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 582:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 584:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 586:	15 86       	std	Z+13, r1	; 0x0d
}
 588:	08 95       	ret

0000058a <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 58a:	fc 01       	movw	r30, r24
 58c:	62 83       	std	Z+2, r22	; 0x02
}
 58e:	08 95       	ret

00000590 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 590:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 592:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 594:	26 85       	ldd	r18, Z+14	; 0x0e
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 596:	9f 5f       	subi	r25, 0xFF	; 255
 598:	93 70       	andi	r25, 0x03	; 3

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	92 13       	cpse	r25, r18
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <USART_TXBuffer_FreeSpace+0x12>
 5a0:	80 e0       	ldi	r24, 0x00	; 0
}
 5a2:	08 95       	ret

000005a4 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	ec 01       	movw	r28, r24
 5ac:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 5ae:	0e 94 c8 02 	call	0x590	; 0x590 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 5b2:	88 23       	and	r24, r24
 5b4:	79 f0       	breq	.+30     	; 0x5d4 <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 5b6:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
 5b8:	fe 01       	movw	r30, r28
 5ba:	e9 0f       	add	r30, r25
 5bc:	f1 1d       	adc	r31, r1
 5be:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 5c0:	9f 5f       	subi	r25, 0xFF	; 255
 5c2:	93 70       	andi	r25, 0x03	; 3
 5c4:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 5c6:	e8 81       	ld	r30, Y
 5c8:	f9 81       	ldd	r31, Y+1	; 0x01
 5ca:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 5cc:	9c 7f       	andi	r25, 0xFC	; 252
 5ce:	2a 81       	ldd	r18, Y+2	; 0x02
 5d0:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 5d2:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	1f 91       	pop	r17
 5da:	08 95       	ret

000005dc <USART_RXBufferData_Available>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
 5dc:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 5de:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 5e0:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	29 13       	cpse	r18, r25
 5e6:	01 c0       	rjmp	.+2      	; 0x5ea <USART_RXBufferData_Available+0xe>
 5e8:	80 e0       	ldi	r24, 0x00	; 0
}
 5ea:	08 95       	ret

000005ec <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 5ec:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 5ee:	a4 85       	ldd	r26, Z+12	; 0x0c
 5f0:	a8 0f       	add	r26, r24
 5f2:	b9 2f       	mov	r27, r25
 5f4:	b1 1d       	adc	r27, r1
 5f6:	13 96       	adiw	r26, 0x03	; 3
 5f8:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 5fa:	94 85       	ldd	r25, Z+12	; 0x0c
 5fc:	9f 5f       	subi	r25, 0xFF	; 255
 5fe:	93 70       	andi	r25, 0x03	; 3
 600:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 602:	08 95       	ret

00000604 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 604:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 606:	83 85       	ldd	r24, Z+11	; 0x0b
 608:	8f 5f       	subi	r24, 0xFF	; 255
 60a:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 60c:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 60e:	a0 81       	ld	r26, Z
 610:	b1 81       	ldd	r27, Z+1	; 0x01
 612:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
 614:	82 17       	cp	r24, r18
 616:	49 f0       	breq	.+18     	; 0x62a <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 618:	a3 85       	ldd	r26, Z+11	; 0x0b
 61a:	ae 0f       	add	r26, r30
 61c:	bf 2f       	mov	r27, r31
 61e:	b1 1d       	adc	r27, r1
 620:	13 96       	adiw	r26, 0x03	; 3
 622:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
 624:	83 87       	std	Z+11, r24	; 0x0b
		ans = true;
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	08 95       	ret
	  	ans = false;
 62a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return ans;
}
 62c:	08 95       	ret

0000062e <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 634:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 636:	95 85       	ldd	r25, Z+13	; 0x0d
 638:	a0 81       	ld	r26, Z
 63a:	b1 81       	ldd	r27, Z+1	; 0x01
 63c:	98 13       	cpse	r25, r24
 63e:	09 c0       	rjmp	.+18     	; 0x652 <USART_DataRegEmpty+0x24>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 640:	13 96       	adiw	r26, 0x03	; 3
 642:	8c 91       	ld	r24, X
 644:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 646:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 648:	13 96       	adiw	r26, 0x03	; 3
 64a:	8c 93       	st	X, r24
		usart_data->usart->DATA = data;

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
	}
}
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	08 95       	ret
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 652:	c6 85       	ldd	r28, Z+14	; 0x0e
 654:	ce 0f       	add	r28, r30
 656:	df 2f       	mov	r29, r31
 658:	d1 1d       	adc	r29, r1
 65a:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
 65c:	8c 93       	st	X, r24
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 65e:	86 85       	ldd	r24, Z+14	; 0x0e
 660:	8f 5f       	subi	r24, 0xFF	; 255
 662:	83 70       	andi	r24, 0x03	; 3
 664:	86 87       	std	Z+14, r24	; 0x0e
}
 666:	f2 cf       	rjmp	.-28     	; 0x64c <USART_DataRegEmpty+0x1e>

00000668 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 668:	fc 01       	movw	r30, r24
 66a:	cb 01       	movw	r24, r22
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
 66c:	24 81       	ldd	r18, Z+4	; 0x04
	if(data & 0x0100) {
 66e:	70 ff       	sbrs	r23, 0
 670:	04 c0       	rjmp	.+8      	; 0x67a <USART_NineBits_PutChar+0x12>
		usart->CTRLB |= USART_TXB8_bm;
 672:	21 60       	ori	r18, 0x01	; 1
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 674:	24 83       	std	Z+4, r18	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 676:	80 83       	st	Z, r24
}
 678:	08 95       	ret
		usart->CTRLB &= ~USART_TXB8_bm;
 67a:	2e 7f       	andi	r18, 0xFE	; 254
 67c:	fb cf       	rjmp	.-10     	; 0x674 <USART_NineBits_PutChar+0xc>

0000067e <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 67e:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 680:	84 81       	ldd	r24, Z+4	; 0x04
 682:	80 ff       	sbrs	r24, 0
 684:	04 c0       	rjmp	.+8      	; 0x68e <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
 686:	80 81       	ld	r24, Z
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	91 60       	ori	r25, 0x01	; 1
 68c:	08 95       	ret
	}else {
		return(usart->DATA);
 68e:	80 81       	ld	r24, Z
 690:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 692:	08 95       	ret

00000694 <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
 694:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    OSC.PLLCTRL = 0x00;
 698:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
    OSC.CTRL |= OSC_XOSCEN_bm;
 69c:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 6a0:	88 60       	ori	r24, 0x08	; 8
 6a2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
 6a6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 6aa:	83 ff       	sbrs	r24, 3
 6ac:	fc cf       	rjmp	.-8      	; 0x6a6 <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
 6ae:	88 ed       	ldi	r24, 0xD8	; 216
 6b0:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
 6b2:	83 e0       	ldi	r24, 0x03	; 3
 6b4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
 6b8:	88 e0       	ldi	r24, 0x08	; 8
 6ba:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
 #if PLATFORM == CW303
    PORTA.DIRSET = PIN5_bm | PIN6_bm;
    PORTA.OUTSET = PIN5_bm | PIN6_bm;
 #endif
}
 6be:	08 95       	ret

000006c0 <KeyExpansion>:
  return rsbox[num];
}

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(void)
{
 6c0:	8f 92       	push	r8
 6c2:	9f 92       	push	r9
 6c4:	af 92       	push	r10
 6c6:	bf 92       	push	r11
 6c8:	ff 92       	push	r15
 6ca:	0f 93       	push	r16
 6cc:	1f 93       	push	r17
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	00 d0       	rcall	.+0      	; 0x6d4 <KeyExpansion+0x14>
 6d4:	0f 92       	push	r0
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
  uint32_t i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for(i = 0; i < Nk; ++i)
 6da:	80 91 7e 22 	lds	r24, 0x227E	; 0x80227e <Key>
 6de:	90 91 7f 22 	lds	r25, 0x227F	; 0x80227f <Key+0x1>
 6e2:	e0 e9       	ldi	r30, 0x90	; 144
 6e4:	f2 e2       	ldi	r31, 0x22	; 34
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 6e6:	af 01       	movw	r20, r30
 6e8:	dc 01       	movw	r26, r24
 6ea:	2c 91       	ld	r18, X
 6ec:	da 01       	movw	r26, r20
 6ee:	2c 93       	st	X, r18
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 6f0:	dc 01       	movw	r26, r24
 6f2:	11 96       	adiw	r26, 0x01	; 1
 6f4:	2c 91       	ld	r18, X
 6f6:	da 01       	movw	r26, r20
 6f8:	11 96       	adiw	r26, 0x01	; 1
 6fa:	2c 93       	st	X, r18
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 6fc:	dc 01       	movw	r26, r24
 6fe:	12 96       	adiw	r26, 0x02	; 2
 700:	2c 91       	ld	r18, X
 702:	da 01       	movw	r26, r20
 704:	12 96       	adiw	r26, 0x02	; 2
 706:	2c 93       	st	X, r18
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 708:	dc 01       	movw	r26, r24
 70a:	13 96       	adiw	r26, 0x03	; 3
 70c:	2c 91       	ld	r18, X
 70e:	da 01       	movw	r26, r20
 710:	13 96       	adiw	r26, 0x03	; 3
 712:	2c 93       	st	X, r18
  for(i = 0; i < Nk; ++i)
 714:	04 96       	adiw	r24, 0x04	; 4
 716:	4c 5f       	subi	r20, 0xFC	; 252
 718:	5f 4f       	sbci	r21, 0xFF	; 255
 71a:	b2 e2       	ldi	r27, 0x22	; 34
 71c:	40 3a       	cpi	r20, 0xA0	; 160
 71e:	5b 07       	cpc	r21, r27
 720:	19 f7       	brne	.-58     	; 0x6e8 <KeyExpansion+0x28>
 722:	94 e0       	ldi	r25, 0x04	; 4
 724:	89 2e       	mov	r8, r25
 726:	91 2c       	mov	r9, r1
 728:	a1 2c       	mov	r10, r1
 72a:	b1 2c       	mov	r11, r1
 72c:	be 01       	movw	r22, r28
 72e:	6b 5f       	subi	r22, 0xFB	; 251
 730:	7f 4f       	sbci	r23, 0xFF	; 255
  }

  // All other round keys are found from the previous round keys.
  for(; (i < (Nb * (Nr + 1))); ++i)
  {
    for(j = 0; j < 4; ++j)
 732:	af 01       	movw	r20, r30
 734:	44 5f       	subi	r20, 0xF4	; 244
 736:	5f 4f       	sbci	r21, 0xFF	; 255
 738:	9e 01       	movw	r18, r28
 73a:	2f 5f       	subi	r18, 0xFF	; 255
 73c:	3f 4f       	sbci	r19, 0xFF	; 255
    {
      tempa[j]=RoundKey[(i-1) * 4 + j];
 73e:	da 01       	movw	r26, r20
 740:	1d 91       	ld	r17, X+
 742:	ad 01       	movw	r20, r26
 744:	d9 01       	movw	r26, r18
 746:	1d 93       	st	X+, r17
 748:	9d 01       	movw	r18, r26
    for(j = 0; j < 4; ++j)
 74a:	6a 17       	cp	r22, r26
 74c:	7b 07       	cpc	r23, r27
 74e:	b9 f7       	brne	.-18     	; 0x73e <KeyExpansion+0x7e>
    }
    if (i % Nk == 0)
 750:	95 01       	movw	r18, r10
 752:	84 01       	movw	r16, r8
 754:	03 70       	andi	r16, 0x03	; 3
 756:	11 27       	eor	r17, r17
 758:	22 27       	eor	r18, r18
 75a:	33 27       	eor	r19, r19
 75c:	01 2b       	or	r16, r17
 75e:	02 2b       	or	r16, r18
 760:	03 2b       	or	r16, r19
 762:	51 f5       	brne	.+84     	; 0x7b8 <KeyExpansion+0xf8>
 764:	29 81       	ldd	r18, Y+1	; 0x01
 766:	4c 81       	ldd	r20, Y+4	; 0x04
  return sbox[num];
 768:	0a 81       	ldd	r16, Y+2	; 0x02
 76a:	10 e0       	ldi	r17, 0x00	; 0
 76c:	05 5f       	subi	r16, 0xF5	; 245
 76e:	1e 4d       	sbci	r17, 0xDE	; 222
 770:	d8 01       	movw	r26, r16
 772:	fc 90       	ld	r15, X
 774:	0b 81       	ldd	r16, Y+3	; 0x03
 776:	10 e0       	ldi	r17, 0x00	; 0
 778:	05 5f       	subi	r16, 0xF5	; 245
 77a:	1e 4d       	sbci	r17, 0xDE	; 222
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
 77c:	d8 01       	movw	r26, r16
 77e:	3c 91       	ld	r19, X
 780:	3a 83       	std	Y+2, r19	; 0x02
  return sbox[num];
 782:	50 e0       	ldi	r21, 0x00	; 0
 784:	45 5f       	subi	r20, 0xF5	; 245
 786:	5e 4d       	sbci	r21, 0xDE	; 222
        tempa[2] = getSBoxValue(tempa[2]);
 788:	da 01       	movw	r26, r20
 78a:	3c 91       	ld	r19, X
 78c:	3b 83       	std	Y+3, r19	; 0x03
  return sbox[num];
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	25 5f       	subi	r18, 0xF5	; 245
 792:	3e 4d       	sbci	r19, 0xDE	; 222
        tempa[3] = getSBoxValue(tempa[3]);
 794:	d9 01       	movw	r26, r18
 796:	2c 91       	ld	r18, X
 798:	2c 83       	std	Y+4, r18	; 0x04
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 79a:	95 01       	movw	r18, r10
 79c:	84 01       	movw	r16, r8
 79e:	82 e0       	ldi	r24, 0x02	; 2
 7a0:	36 95       	lsr	r19
 7a2:	27 95       	ror	r18
 7a4:	17 95       	ror	r17
 7a6:	07 95       	ror	r16
 7a8:	8a 95       	dec	r24
 7aa:	d1 f7       	brne	.-12     	; 0x7a0 <KeyExpansion+0xe0>
 7ac:	00 50       	subi	r16, 0x00	; 0
 7ae:	10 4e       	sbci	r17, 0xE0	; 224
 7b0:	d8 01       	movw	r26, r16
 7b2:	2c 91       	ld	r18, X
 7b4:	2f 25       	eor	r18, r15
 7b6:	29 83       	std	Y+1, r18	; 0x01
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 7b8:	20 81       	ld	r18, Z
 7ba:	39 81       	ldd	r19, Y+1	; 0x01
 7bc:	23 27       	eor	r18, r19
 7be:	20 8b       	std	Z+16, r18	; 0x10
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 7c0:	21 81       	ldd	r18, Z+1	; 0x01
 7c2:	3a 81       	ldd	r19, Y+2	; 0x02
 7c4:	23 27       	eor	r18, r19
 7c6:	21 8b       	std	Z+17, r18	; 0x11
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 7c8:	22 81       	ldd	r18, Z+2	; 0x02
 7ca:	3b 81       	ldd	r19, Y+3	; 0x03
 7cc:	23 27       	eor	r18, r19
 7ce:	22 8b       	std	Z+18, r18	; 0x12
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 7d0:	23 81       	ldd	r18, Z+3	; 0x03
 7d2:	3c 81       	ldd	r19, Y+4	; 0x04
 7d4:	23 27       	eor	r18, r19
 7d6:	23 8b       	std	Z+19, r18	; 0x13
  for(; (i < (Nb * (Nr + 1))); ++i)
 7d8:	bf ef       	ldi	r27, 0xFF	; 255
 7da:	8b 1a       	sub	r8, r27
 7dc:	9b 0a       	sbc	r9, r27
 7de:	ab 0a       	sbc	r10, r27
 7e0:	bb 0a       	sbc	r11, r27
 7e2:	34 96       	adiw	r30, 0x04	; 4
 7e4:	2c e2       	ldi	r18, 0x2C	; 44
 7e6:	82 16       	cp	r8, r18
 7e8:	91 04       	cpc	r9, r1
 7ea:	a1 04       	cpc	r10, r1
 7ec:	b1 04       	cpc	r11, r1
 7ee:	09 f0       	breq	.+2      	; 0x7f2 <KeyExpansion+0x132>
 7f0:	a0 cf       	rjmp	.-192    	; 0x732 <KeyExpansion+0x72>
  }
}
 7f2:	24 96       	adiw	r28, 0x04	; 4
 7f4:	cd bf       	out	0x3d, r28	; 61
 7f6:	de bf       	out	0x3e, r29	; 62
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	1f 91       	pop	r17
 7fe:	0f 91       	pop	r16
 800:	ff 90       	pop	r15
 802:	bf 90       	pop	r11
 804:	af 90       	pop	r10
 806:	9f 90       	pop	r9
 808:	8f 90       	pop	r8
 80a:	08 95       	ret

0000080c <AddRoundKey>:

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round)
{
 80c:	1f 93       	push	r17
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29
  uint8_t i,j;
  for(i=0;i<4;++i)
 812:	20 91 40 23 	lds	r18, 0x2340	; 0x802340 <state>
 816:	30 91 41 23 	lds	r19, 0x2341	; 0x802341 <state+0x1>
 81a:	40 e1       	ldi	r20, 0x10	; 16
 81c:	84 9f       	mul	r24, r20
 81e:	c0 01       	movw	r24, r0
 820:	11 24       	eor	r1, r1
 822:	b9 01       	movw	r22, r18
 824:	60 5f       	subi	r22, 0xF0	; 240
 826:	7f 4f       	sbci	r23, 0xFF	; 255
  {
    for(j = 0; j < 4; ++j)
 828:	dc 01       	movw	r26, r24
 82a:	a0 57       	subi	r26, 0x70	; 112
 82c:	bd 4d       	sbci	r27, 0xDD	; 221
{
 82e:	f9 01       	movw	r30, r18
    for(j = 0; j < 4; ++j)
 830:	40 e0       	ldi	r20, 0x00	; 0
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 832:	51 91       	ld	r21, Z+
 834:	1d 91       	ld	r17, X+
 836:	ef 01       	movw	r28, r30
 838:	21 97       	sbiw	r28, 0x01	; 1
 83a:	51 27       	eor	r21, r17
 83c:	58 83       	st	Y, r21
    for(j = 0; j < 4; ++j)
 83e:	4f 5f       	subi	r20, 0xFF	; 255
 840:	44 30       	cpi	r20, 0x04	; 4
 842:	b9 f7       	brne	.-18     	; 0x832 <AddRoundKey+0x26>
  for(i=0;i<4;++i)
 844:	2c 5f       	subi	r18, 0xFC	; 252
 846:	3f 4f       	sbci	r19, 0xFF	; 255
 848:	04 96       	adiw	r24, 0x04	; 4
 84a:	26 17       	cp	r18, r22
 84c:	37 07       	cpc	r19, r23
 84e:	61 f7       	brne	.-40     	; 0x828 <AddRoundKey+0x1c>
    }
  }
}
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	1f 91       	pop	r17
 856:	08 95       	ret

00000858 <SubBytes>:
// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(void)
{
  uint8_t i, j;
  for(i = 0; i < 4; ++i)
 858:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <state>
 85c:	90 91 41 23 	lds	r25, 0x2341	; 0x802341 <state+0x1>
 860:	ac 01       	movw	r20, r24
 862:	4c 5f       	subi	r20, 0xFC	; 252
 864:	5f 4f       	sbci	r21, 0xFF	; 255
{
 866:	dc 01       	movw	r26, r24
 868:	24 e0       	ldi	r18, 0x04	; 4
  return sbox[num];
 86a:	ec 91       	ld	r30, X
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	e5 5f       	subi	r30, 0xF5	; 245
 870:	fe 4d       	sbci	r31, 0xDE	; 222
 872:	30 81       	ld	r19, Z
      if (input_save[4*i+j] & 0x02) {
        volatile int i = 1;
        i+=1;
      }
      #endif
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 874:	3c 93       	st	X, r19
    for(j = 0; j < 4; ++j)
 876:	21 50       	subi	r18, 0x01	; 1
 878:	14 96       	adiw	r26, 0x04	; 4
 87a:	21 11       	cpse	r18, r1
 87c:	f6 cf       	rjmp	.-20     	; 0x86a <SubBytes+0x12>
  for(i = 0; i < 4; ++i)
 87e:	01 96       	adiw	r24, 0x01	; 1
 880:	84 17       	cp	r24, r20
 882:	95 07       	cpc	r25, r21
 884:	81 f7       	brne	.-32     	; 0x866 <SubBytes+0xe>
    }
  }
}
 886:	08 95       	ret

00000888 <ShiftRows>:
        i += 1;
      }
      #endif
  #ifdef JITTER_2
  #endif
  temp           = (*state)[0][1];
 888:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <state>
 88c:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <state+0x1>
 890:	81 81       	ldd	r24, Z+1	; 0x01
  (*state)[0][1] = (*state)[1][1];
 892:	95 81       	ldd	r25, Z+5	; 0x05
 894:	91 83       	std	Z+1, r25	; 0x01
  (*state)[1][1] = (*state)[2][1];
 896:	91 85       	ldd	r25, Z+9	; 0x09
 898:	95 83       	std	Z+5, r25	; 0x05
  (*state)[2][1] = (*state)[3][1];
 89a:	95 85       	ldd	r25, Z+13	; 0x0d
 89c:	91 87       	std	Z+9, r25	; 0x09
  (*state)[3][1] = temp;
 89e:	85 87       	std	Z+13, r24	; 0x0d
        i += 1;
      }
      #endif
  #ifdef JITTER_2
  #endif
  temp           = (*state)[0][2];
 8a0:	82 81       	ldd	r24, Z+2	; 0x02
  (*state)[0][2] = (*state)[2][2];
 8a2:	92 85       	ldd	r25, Z+10	; 0x0a
 8a4:	92 83       	std	Z+2, r25	; 0x02
  (*state)[2][2] = temp;
 8a6:	82 87       	std	Z+10, r24	; 0x0a
        volatile int i = 0;
        i += 1;
      }
      #endif

  temp       = (*state)[1][2];
 8a8:	86 81       	ldd	r24, Z+6	; 0x06
  (*state)[1][2] = (*state)[3][2];
 8aa:	96 85       	ldd	r25, Z+14	; 0x0e
 8ac:	96 83       	std	Z+6, r25	; 0x06
  (*state)[3][2] = temp;
 8ae:	86 87       	std	Z+14, r24	; 0x0e
      }
      #endif
  #ifdef JITTER_2
  #endif
  // Rotate third row 3 columns to left
  temp       = (*state)[0][3];
 8b0:	83 81       	ldd	r24, Z+3	; 0x03
  (*state)[0][3] = (*state)[3][3];
 8b2:	97 85       	ldd	r25, Z+15	; 0x0f
 8b4:	93 83       	std	Z+3, r25	; 0x03
  (*state)[3][3] = (*state)[2][3];
 8b6:	93 85       	ldd	r25, Z+11	; 0x0b
 8b8:	97 87       	std	Z+15, r25	; 0x0f
  (*state)[2][3] = (*state)[1][3];
 8ba:	97 81       	ldd	r25, Z+7	; 0x07
 8bc:	93 87       	std	Z+11, r25	; 0x0b
  (*state)[1][3] = temp;
 8be:	87 83       	std	Z+7, r24	; 0x07
}
 8c0:	08 95       	ret

000008c2 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8c2:	98 2f       	mov	r25, r24
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8c4:	88 1f       	adc	r24, r24
 8c6:	88 27       	eor	r24, r24
 8c8:	88 1f       	adc	r24, r24
 8ca:	2b e1       	ldi	r18, 0x1B	; 27
 8cc:	82 9f       	mul	r24, r18
 8ce:	80 2d       	mov	r24, r0
 8d0:	11 24       	eor	r1, r1
 8d2:	99 0f       	add	r25, r25
}
 8d4:	89 27       	eor	r24, r25
 8d6:	08 95       	ret

000008d8 <InvSubBytes>:
// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(void)
{
  uint8_t i,j;
  for(i=0;i<4;++i)
 8d8:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <state>
 8dc:	90 91 41 23 	lds	r25, 0x2341	; 0x802341 <state+0x1>
 8e0:	ac 01       	movw	r20, r24
 8e2:	4c 5f       	subi	r20, 0xFC	; 252
 8e4:	5f 4f       	sbci	r21, 0xFF	; 255
{
 8e6:	dc 01       	movw	r26, r24
 8e8:	24 e0       	ldi	r18, 0x04	; 4
  return rsbox[num];
 8ea:	ec 91       	ld	r30, X
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	e5 5f       	subi	r30, 0xF5	; 245
 8f0:	ff 4d       	sbci	r31, 0xDF	; 223
 8f2:	30 81       	ld	r19, Z
  {
    for(j=0;j<4;++j)
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8f4:	3c 93       	st	X, r19
    for(j=0;j<4;++j)
 8f6:	21 50       	subi	r18, 0x01	; 1
 8f8:	14 96       	adiw	r26, 0x04	; 4
 8fa:	21 11       	cpse	r18, r1
 8fc:	f6 cf       	rjmp	.-20     	; 0x8ea <InvSubBytes+0x12>
  for(i=0;i<4;++i)
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	84 17       	cp	r24, r20
 902:	95 07       	cpc	r25, r21
 904:	81 f7       	brne	.-32     	; 0x8e6 <InvSubBytes+0xe>
    }
  }
}
 906:	08 95       	ret

00000908 <InvShiftRows>:
static void InvShiftRows(void)
{
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp=(*state)[3][1];
 908:	e0 91 40 23 	lds	r30, 0x2340	; 0x802340 <state>
 90c:	f0 91 41 23 	lds	r31, 0x2341	; 0x802341 <state+0x1>
 910:	85 85       	ldd	r24, Z+13	; 0x0d
  (*state)[3][1]=(*state)[2][1];
 912:	91 85       	ldd	r25, Z+9	; 0x09
 914:	95 87       	std	Z+13, r25	; 0x0d
  (*state)[2][1]=(*state)[1][1];
 916:	95 81       	ldd	r25, Z+5	; 0x05
 918:	91 87       	std	Z+9, r25	; 0x09
  (*state)[1][1]=(*state)[0][1];
 91a:	91 81       	ldd	r25, Z+1	; 0x01
 91c:	95 83       	std	Z+5, r25	; 0x05
  (*state)[0][1]=temp;
 91e:	81 83       	std	Z+1, r24	; 0x01

  // Rotate second row 2 columns to right 
  temp=(*state)[0][2];
 920:	82 81       	ldd	r24, Z+2	; 0x02
  (*state)[0][2]=(*state)[2][2];
 922:	92 85       	ldd	r25, Z+10	; 0x0a
 924:	92 83       	std	Z+2, r25	; 0x02
  (*state)[2][2]=temp;
 926:	82 87       	std	Z+10, r24	; 0x0a

  temp=(*state)[1][2];
 928:	86 81       	ldd	r24, Z+6	; 0x06
  (*state)[1][2]=(*state)[3][2];
 92a:	96 85       	ldd	r25, Z+14	; 0x0e
 92c:	96 83       	std	Z+6, r25	; 0x06
  (*state)[3][2]=temp;
 92e:	86 87       	std	Z+14, r24	; 0x0e

  // Rotate third row 3 columns to right
  temp=(*state)[0][3];
 930:	83 81       	ldd	r24, Z+3	; 0x03
  (*state)[0][3]=(*state)[1][3];
 932:	97 81       	ldd	r25, Z+7	; 0x07
 934:	93 83       	std	Z+3, r25	; 0x03
  (*state)[1][3]=(*state)[2][3];
 936:	93 85       	ldd	r25, Z+11	; 0x0b
 938:	97 83       	std	Z+7, r25	; 0x07
  (*state)[2][3]=(*state)[3][3];
 93a:	97 85       	ldd	r25, Z+15	; 0x0f
 93c:	93 87       	std	Z+11, r25	; 0x0b
  (*state)[3][3]=temp;
 93e:	87 87       	std	Z+15, r24	; 0x0f
}
 940:	08 95       	ret

00000942 <Cipher>:


// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
 942:	9f 92       	push	r9
 944:	af 92       	push	r10
 946:	bf 92       	push	r11
 948:	cf 92       	push	r12
 94a:	df 92       	push	r13
 94c:	ef 92       	push	r14
 94e:	ff 92       	push	r15
 950:	0f 93       	push	r16
 952:	1f 93       	push	r17
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0); 
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	0e 94 06 04 	call	0x80c	; 0x80c <AddRoundKey>
  
  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for(round = 1; round < Nr; ++round)
 95e:	cc 24       	eor	r12, r12
 960:	c3 94       	inc	r12
  {
    SubBytes();
 962:	0e 94 2c 04 	call	0x858	; 0x858 <SubBytes>
    ShiftRows();
 966:	0e 94 44 04 	call	0x888	; 0x888 <ShiftRows>
  for(i = 0; i < 4; ++i)
 96a:	c0 91 40 23 	lds	r28, 0x2340	; 0x802340 <state>
 96e:	d0 91 41 23 	lds	r29, 0x2341	; 0x802341 <state+0x1>
 972:	7e 01       	movw	r14, r28
 974:	80 e1       	ldi	r24, 0x10	; 16
 976:	e8 0e       	add	r14, r24
 978:	f1 1c       	adc	r15, r1
    t   = (*state)[i][0];
 97a:	a8 80       	ld	r10, Y
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 97c:	d9 80       	ldd	r13, Y+1	; 0x01
 97e:	8a 2d       	mov	r24, r10
 980:	8d 25       	eor	r24, r13
 982:	0a 81       	ldd	r16, Y+2	; 0x02
 984:	1b 81       	ldd	r17, Y+3	; 0x03
 986:	90 2e       	mov	r9, r16
 988:	91 26       	eor	r9, r17
 98a:	b9 2c       	mov	r11, r9
 98c:	b8 26       	eor	r11, r24
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 98e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 992:	8a 25       	eor	r24, r10
 994:	8b 25       	eor	r24, r11
 996:	88 83       	st	Y, r24
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 998:	8d 2d       	mov	r24, r13
 99a:	80 27       	eor	r24, r16
 99c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 9a0:	d8 26       	eor	r13, r24
 9a2:	db 24       	eor	r13, r11
 9a4:	d9 82       	std	Y+1, r13	; 0x01
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 9a6:	89 2d       	mov	r24, r9
 9a8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 9ac:	08 27       	eor	r16, r24
 9ae:	0b 25       	eor	r16, r11
 9b0:	0a 83       	std	Y+2, r16	; 0x02
    Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 9b2:	8a 2d       	mov	r24, r10
 9b4:	81 27       	eor	r24, r17
 9b6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 9ba:	18 27       	eor	r17, r24
 9bc:	1b 25       	eor	r17, r11
 9be:	1b 83       	std	Y+3, r17	; 0x03
  for(i = 0; i < 4; ++i)
 9c0:	24 96       	adiw	r28, 0x04	; 4
 9c2:	ce 15       	cp	r28, r14
 9c4:	df 05       	cpc	r29, r15
 9c6:	c9 f6       	brne	.-78     	; 0x97a <Cipher+0x38>
    MixColumns();
    AddRoundKey(round);
 9c8:	8c 2d       	mov	r24, r12
 9ca:	0e 94 06 04 	call	0x80c	; 0x80c <AddRoundKey>
  for(round = 1; round < Nr; ++round)
 9ce:	c3 94       	inc	r12
 9d0:	8a e0       	ldi	r24, 0x0A	; 10
 9d2:	c8 12       	cpse	r12, r24
 9d4:	c6 cf       	rjmp	.-116    	; 0x962 <Cipher+0x20>
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes();
 9d6:	0e 94 2c 04 	call	0x858	; 0x858 <SubBytes>
  ShiftRows();
 9da:	0e 94 44 04 	call	0x888	; 0x888 <ShiftRows>
  AddRoundKey(Nr);
 9de:	8a e0       	ldi	r24, 0x0A	; 10
}
 9e0:	df 91       	pop	r29
 9e2:	cf 91       	pop	r28
 9e4:	1f 91       	pop	r17
 9e6:	0f 91       	pop	r16
 9e8:	ff 90       	pop	r15
 9ea:	ef 90       	pop	r14
 9ec:	df 90       	pop	r13
 9ee:	cf 90       	pop	r12
 9f0:	bf 90       	pop	r11
 9f2:	af 90       	pop	r10
 9f4:	9f 90       	pop	r9
  AddRoundKey(Nr);
 9f6:	0c 94 06 04 	jmp	0x80c	; 0x80c <AddRoundKey>

000009fa <BlockCopy>:
  InvSubBytes();
  AddRoundKey(0);
}

static void BlockCopy(uint8_t* output, const uint8_t* input)
{
 9fa:	fb 01       	movw	r30, r22
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
 9fc:	dc 01       	movw	r26, r24
 9fe:	cb 01       	movw	r24, r22
 a00:	40 96       	adiw	r24, 0x10	; 16
  {
    output[i] = input[i];
 a02:	21 91       	ld	r18, Z+
 a04:	2d 93       	st	X+, r18
  for (i=0;i<KEYLEN;++i)
 a06:	e8 17       	cp	r30, r24
 a08:	f9 07       	cpc	r31, r25
 a0a:	d9 f7       	brne	.-10     	; 0xa02 <BlockCopy+0x8>
  }
}
 a0c:	08 95       	ret

00000a0e <AES128_ECB_indp_setkey>:
/* Public functions:                                                         */
/*****************************************************************************/

void AES128_ECB_indp_setkey(uint8_t* key)
{
  Key = key;
 a0e:	80 93 7e 22 	sts	0x227E, r24	; 0x80227e <Key>
 a12:	90 93 7f 22 	sts	0x227F, r25	; 0x80227f <Key+0x1>
  KeyExpansion();
 a16:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <KeyExpansion>

00000a1a <AES128_ECB_indp_crypto>:
}

void AES128_ECB_indp_crypto(uint8_t* input)
{
 a1a:	bc 01       	movw	r22, r24
  state = (state_t*)input;
 a1c:	80 93 40 23 	sts	0x2340, r24	; 0x802340 <state>
 a20:	70 93 41 23 	sts	0x2341, r23	; 0x802341 <state+0x1>
  BlockCopy(input_save, input);
 a24:	80 e8       	ldi	r24, 0x80	; 128
 a26:	92 e2       	ldi	r25, 0x22	; 34
 a28:	0e 94 fd 04 	call	0x9fa	; 0x9fa <BlockCopy>
  Cipher();
 a2c:	0c 94 a1 04 	jmp	0x942	; 0x942 <Cipher>

00000a30 <AES128_ECB_encrypt>:
}

void AES128_ECB_encrypt(uint8_t* input, uint8_t* key, uint8_t* output)
{
 a30:	0f 93       	push	r16
 a32:	1f 93       	push	r17
 a34:	cf 93       	push	r28
 a36:	df 93       	push	r29
 a38:	8b 01       	movw	r16, r22
 a3a:	d4 2f       	mov	r29, r20
 a3c:	c5 2f       	mov	r28, r21
  // Copy input to output, and work in-memory on output
  BlockCopy(output, input);
 a3e:	bc 01       	movw	r22, r24
 a40:	84 2f       	mov	r24, r20
 a42:	95 2f       	mov	r25, r21
 a44:	0e 94 fd 04 	call	0x9fa	; 0x9fa <BlockCopy>
  state = (state_t*)output;
 a48:	d0 93 40 23 	sts	0x2340, r29	; 0x802340 <state>
 a4c:	c0 93 41 23 	sts	0x2341, r28	; 0x802341 <state+0x1>

  Key = key;
 a50:	00 93 7e 22 	sts	0x227E, r16	; 0x80227e <Key>
 a54:	10 93 7f 22 	sts	0x227F, r17	; 0x80227f <Key+0x1>
  KeyExpansion();
 a58:	0e 94 60 03 	call	0x6c0	; 0x6c0 <KeyExpansion>

  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher();
}
 a5c:	df 91       	pop	r29
 a5e:	cf 91       	pop	r28
 a60:	1f 91       	pop	r17
 a62:	0f 91       	pop	r16
  Cipher();
 a64:	0c 94 a1 04 	jmp	0x942	; 0x942 <Cipher>

00000a68 <AES128_ECB_decrypt>:

void AES128_ECB_decrypt(uint8_t* input, uint8_t* key, uint8_t *output)
{
 a68:	2f 92       	push	r2
 a6a:	3f 92       	push	r3
 a6c:	4f 92       	push	r4
 a6e:	5f 92       	push	r5
 a70:	6f 92       	push	r6
 a72:	7f 92       	push	r7
 a74:	8f 92       	push	r8
 a76:	9f 92       	push	r9
 a78:	af 92       	push	r10
 a7a:	bf 92       	push	r11
 a7c:	cf 92       	push	r12
 a7e:	df 92       	push	r13
 a80:	ef 92       	push	r14
 a82:	ff 92       	push	r15
 a84:	0f 93       	push	r16
 a86:	1f 93       	push	r17
 a88:	cf 93       	push	r28
 a8a:	df 93       	push	r29
 a8c:	00 d0       	rcall	.+0      	; 0xa8e <AES128_ECB_decrypt+0x26>
 a8e:	00 d0       	rcall	.+0      	; 0xa90 <AES128_ECB_decrypt+0x28>
 a90:	cd b7       	in	r28, 0x3d	; 61
 a92:	de b7       	in	r29, 0x3e	; 62
 a94:	6a 83       	std	Y+2, r22	; 0x02
 a96:	79 83       	std	Y+1, r23	; 0x01
 a98:	6a 01       	movw	r12, r20
  // Copy input to output, and work in-memory on output
  BlockCopy(output, input);
 a9a:	bc 01       	movw	r22, r24
 a9c:	ca 01       	movw	r24, r20
 a9e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <BlockCopy>
  state = (state_t*)output;
 aa2:	c0 92 40 23 	sts	0x2340, r12	; 0x802340 <state>
 aa6:	d0 92 41 23 	sts	0x2341, r13	; 0x802341 <state+0x1>

  // The KeyExpansion routine must be called before encryption.
  Key = key;
 aaa:	2a 81       	ldd	r18, Y+2	; 0x02
 aac:	20 93 7e 22 	sts	0x227E, r18	; 0x80227e <Key>
 ab0:	89 81       	ldd	r24, Y+1	; 0x01
 ab2:	80 93 7f 22 	sts	0x227F, r24	; 0x80227f <Key+0x1>
  KeyExpansion();
 ab6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <KeyExpansion>
  AddRoundKey(Nr); 
 aba:	8a e0       	ldi	r24, 0x0A	; 10
 abc:	0e 94 06 04 	call	0x80c	; 0x80c <AddRoundKey>
  for(round=Nr-1;round>0;round--)
 ac0:	99 e0       	ldi	r25, 0x09	; 9
 ac2:	99 83       	std	Y+1, r25	; 0x01
 ac4:	f6 01       	movw	r30, r12
 ac6:	70 96       	adiw	r30, 0x10	; 16
 ac8:	eb 83       	std	Y+3, r30	; 0x03
 aca:	fc 83       	std	Y+4, r31	; 0x04
    InvShiftRows();
 acc:	0e 94 84 04 	call	0x908	; 0x908 <InvShiftRows>
    InvSubBytes();
 ad0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <InvSubBytes>
    AddRoundKey(round);
 ad4:	89 81       	ldd	r24, Y+1	; 0x01
 ad6:	0e 94 06 04 	call	0x80c	; 0x80c <AddRoundKey>
  for(i=0;i<4;++i)
 ada:	76 01       	movw	r14, r12
    a = (*state)[i][0];
 adc:	f7 01       	movw	r30, r14
 ade:	30 80       	ld	r3, Z
    b = (*state)[i][1];
 ae0:	41 80       	ldd	r4, Z+1	; 0x01
    c = (*state)[i][2];
 ae2:	52 80       	ldd	r5, Z+2	; 0x02
    d = (*state)[i][3];
 ae4:	23 80       	ldd	r2, Z+3	; 0x03
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 ae6:	83 2d       	mov	r24, r3
 ae8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 aec:	8d 83       	std	Y+5, r24	; 0x05
 aee:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 af2:	8e 83       	std	Y+6, r24	; 0x06
 af4:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 af8:	a8 2e       	mov	r10, r24
 afa:	84 2d       	mov	r24, r4
 afc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 b00:	18 2f       	mov	r17, r24
 b02:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 b06:	98 2e       	mov	r9, r24
 b08:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 b0c:	b8 2e       	mov	r11, r24
 b0e:	85 2d       	mov	r24, r5
 b10:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 b14:	78 2e       	mov	r7, r24
 b16:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 b1a:	88 2e       	mov	r8, r24
 b1c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 b20:	08 2f       	mov	r16, r24
 b22:	82 2d       	mov	r24, r2
 b24:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 b28:	8a 83       	std	Y+2, r24	; 0x02
 b2a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 b2e:	68 2e       	mov	r6, r24
 b30:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xtime>
 b34:	98 2f       	mov	r25, r24
 b36:	8d 81       	ldd	r24, Y+5	; 0x05
 b38:	fe 81       	ldd	r31, Y+6	; 0x06
 b3a:	8f 27       	eor	r24, r31
 b3c:	8a 25       	eor	r24, r10
 b3e:	81 27       	eor	r24, r17
 b40:	8b 25       	eor	r24, r11
 b42:	88 25       	eor	r24, r8
 b44:	80 27       	eor	r24, r16
 b46:	89 27       	eor	r24, r25
 b48:	84 25       	eor	r24, r4
 b4a:	85 25       	eor	r24, r5
 b4c:	82 25       	eor	r24, r2
 b4e:	f7 01       	movw	r30, r14
 b50:	80 83       	st	Z, r24
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 b52:	8a 2d       	mov	r24, r10
 b54:	81 27       	eor	r24, r17
 b56:	89 25       	eor	r24, r9
 b58:	8b 25       	eor	r24, r11
 b5a:	87 25       	eor	r24, r7
 b5c:	80 27       	eor	r24, r16
 b5e:	86 25       	eor	r24, r6
 b60:	89 27       	eor	r24, r25
 b62:	83 25       	eor	r24, r3
 b64:	85 25       	eor	r24, r5
 b66:	82 25       	eor	r24, r2
 b68:	81 83       	std	Z+1, r24	; 0x01
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 b6a:	fe 81       	ldd	r31, Y+6	; 0x06
 b6c:	fa 25       	eor	r31, r10
 b6e:	fb 25       	eor	r31, r11
 b70:	7f 26       	eor	r7, r31
 b72:	87 24       	eor	r8, r7
 b74:	80 26       	eor	r8, r16
 b76:	2a 81       	ldd	r18, Y+2	; 0x02
 b78:	82 26       	eor	r8, r18
 b7a:	89 26       	eor	r8, r25
 b7c:	83 24       	eor	r8, r3
 b7e:	84 24       	eor	r8, r4
 b80:	28 24       	eor	r2, r8
 b82:	f7 01       	movw	r30, r14
 b84:	22 82       	std	Z+2, r2	; 0x02
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 b86:	8d 81       	ldd	r24, Y+5	; 0x05
 b88:	8a 25       	eor	r24, r10
 b8a:	89 25       	eor	r24, r9
 b8c:	8b 25       	eor	r24, r11
 b8e:	80 27       	eor	r24, r16
 b90:	82 27       	eor	r24, r18
 b92:	86 25       	eor	r24, r6
 b94:	89 27       	eor	r24, r25
 b96:	38 26       	eor	r3, r24
 b98:	43 24       	eor	r4, r3
 b9a:	54 24       	eor	r5, r4
 b9c:	53 82       	std	Z+3, r5	; 0x03
  for(i=0;i<4;++i)
 b9e:	f4 e0       	ldi	r31, 0x04	; 4
 ba0:	ef 0e       	add	r14, r31
 ba2:	f1 1c       	adc	r15, r1
 ba4:	8b 81       	ldd	r24, Y+3	; 0x03
 ba6:	9c 81       	ldd	r25, Y+4	; 0x04
 ba8:	8e 15       	cp	r24, r14
 baa:	9f 05       	cpc	r25, r15
 bac:	09 f0       	breq	.+2      	; 0xbb0 <AES128_ECB_decrypt+0x148>
 bae:	96 cf       	rjmp	.-212    	; 0xadc <AES128_ECB_decrypt+0x74>
  for(round=Nr-1;round>0;round--)
 bb0:	99 81       	ldd	r25, Y+1	; 0x01
 bb2:	91 50       	subi	r25, 0x01	; 1
 bb4:	99 83       	std	Y+1, r25	; 0x01
 bb6:	91 11       	cpse	r25, r1
 bb8:	89 cf       	rjmp	.-238    	; 0xacc <AES128_ECB_decrypt+0x64>
  InvShiftRows();
 bba:	0e 94 84 04 	call	0x908	; 0x908 <InvShiftRows>
  InvSubBytes();
 bbe:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <InvSubBytes>
  AddRoundKey(0);
 bc2:	80 e0       	ldi	r24, 0x00	; 0

  InvCipher();
}
 bc4:	26 96       	adiw	r28, 0x06	; 6
 bc6:	cd bf       	out	0x3d, r28	; 61
 bc8:	de bf       	out	0x3e, r29	; 62
 bca:	df 91       	pop	r29
 bcc:	cf 91       	pop	r28
 bce:	1f 91       	pop	r17
 bd0:	0f 91       	pop	r16
 bd2:	ff 90       	pop	r15
 bd4:	ef 90       	pop	r14
 bd6:	df 90       	pop	r13
 bd8:	cf 90       	pop	r12
 bda:	bf 90       	pop	r11
 bdc:	af 90       	pop	r10
 bde:	9f 90       	pop	r9
 be0:	8f 90       	pop	r8
 be2:	7f 90       	pop	r7
 be4:	6f 90       	pop	r6
 be6:	5f 90       	pop	r5
 be8:	4f 90       	pop	r4
 bea:	3f 90       	pop	r3
 bec:	2f 90       	pop	r2
  AddRoundKey(0);
 bee:	0c 94 06 04 	jmp	0x80c	; 0x80c <AddRoundKey>

00000bf2 <aes_indep_init>:
uint8_t enckey[16];

void aes_indep_init(void)
{
	;
}
 bf2:	08 95       	ret

00000bf4 <aes_indep_key>:

void aes_indep_key(uint8_t * key)
{
    AES128_ECB_indp_setkey(key);
 bf4:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <AES128_ECB_indp_setkey>

00000bf8 <aes_indep_enc>:
}

void aes_indep_enc(uint8_t * pt)
{
	AES128_ECB_indp_crypto(pt);
 bf8:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <AES128_ECB_indp_crypto>

00000bfc <aes_indep_enc_pretrigger>:
}

void aes_indep_enc_pretrigger(uint8_t * pt)
{
    ;
}
 bfc:	08 95       	ret

00000bfe <aes_indep_enc_posttrigger>:
 bfe:	08 95       	ret

00000c00 <aes_indep_mask>:
 c00:	08 95       	ret

00000c02 <main>:

int main(void)
{
 c02:	cd b7       	in	r28, 0x3d	; 61
 c04:	de b7       	in	r29, 0x3e	; 62
 c06:	60 97       	sbiw	r28, 0x10	; 16
 c08:	cd bf       	out	0x3d, r28	; 61
 c0a:	de bf       	out	0x3e, r29	; 62
	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 c0c:	80 e1       	ldi	r24, 0x10	; 16
 c0e:	eb e1       	ldi	r30, 0x1B	; 27
 c10:	f2 e2       	ldi	r31, 0x22	; 34
 c12:	de 01       	movw	r26, r28
 c14:	11 96       	adiw	r26, 0x01	; 1
 c16:	01 90       	ld	r0, Z+
 c18:	0d 92       	st	X+, r0
 c1a:	8a 95       	dec	r24
 c1c:	e1 f7       	brne	.-8      	; 0xc16 <main+0x14>

    platform_init();
 c1e:	0e 94 4a 03 	call	0x694	; 0x694 <platform_init>
    init_uart();
 c22:	0e 94 79 02 	call	0x4f2	; 0x4f2 <init_uart0>
    trigger_setup();
 c26:	81 e0       	ldi	r24, 0x01	; 1
 c28:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>

	aes_indep_init();
 c2c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <aes_indep_init>
	aes_indep_key(tmp);
 c30:	ce 01       	movw	r24, r28
 c32:	01 96       	adiw	r24, 0x01	; 1
 c34:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <aes_indep_key>

    /* Uncomment this to get a HELLO message for debug */

    putch('h');
 c38:	88 e6       	ldi	r24, 0x68	; 104
 c3a:	0e 94 b5 02 	call	0x56a	; 0x56a <output_ch_0>
    putch('e');
 c3e:	85 e6       	ldi	r24, 0x65	; 101
 c40:	0e 94 b5 02 	call	0x56a	; 0x56a <output_ch_0>
    putch('l');
 c44:	8c e6       	ldi	r24, 0x6C	; 108
 c46:	0e 94 b5 02 	call	0x56a	; 0x56a <output_ch_0>
    putch('l');
 c4a:	8c e6       	ldi	r24, 0x6C	; 108
 c4c:	0e 94 b5 02 	call	0x56a	; 0x56a <output_ch_0>
    putch('o');
 c50:	8f e6       	ldi	r24, 0x6F	; 111
 c52:	0e 94 b5 02 	call	0x56a	; 0x56a <output_ch_0>
    putch('\n');
 c56:	8a e0       	ldi	r24, 0x0A	; 10
 c58:	0e 94 b5 02 	call	0x56a	; 0x56a <output_ch_0>

	simpleserial_init();
 c5c:	0e 94 ac 01 	call	0x358	; 0x358 <simpleserial_init>
    simpleserial_addcmd('k', 16, get_key);
 c60:	47 e1       	ldi	r20, 0x17	; 23
 c62:	51 e0       	ldi	r21, 0x01	; 1
 c64:	60 e1       	ldi	r22, 0x10	; 16
 c66:	70 e0       	ldi	r23, 0x00	; 0
 c68:	8b e6       	ldi	r24, 0x6B	; 107
 c6a:	0e 94 89 01 	call	0x312	; 0x312 <simpleserial_addcmd>
    simpleserial_addcmd('p', 16,  get_pt);
 c6e:	4b e1       	ldi	r20, 0x1B	; 27
 c70:	51 e0       	ldi	r21, 0x01	; 1
 c72:	60 e1       	ldi	r22, 0x10	; 16
 c74:	70 e0       	ldi	r23, 0x00	; 0
 c76:	80 e7       	ldi	r24, 0x70	; 112
 c78:	0e 94 89 01 	call	0x312	; 0x312 <simpleserial_addcmd>
    simpleserial_addcmd('x',  0,   reset);
 c7c:	41 e1       	ldi	r20, 0x11	; 17
 c7e:	51 e0       	ldi	r21, 0x01	; 1
 c80:	70 e0       	ldi	r23, 0x00	; 0
 c82:	60 e0       	ldi	r22, 0x00	; 0
 c84:	88 e7       	ldi	r24, 0x78	; 120
 c86:	0e 94 89 01 	call	0x312	; 0x312 <simpleserial_addcmd>
    simpleserial_addcmd('m', 18, get_mask);
 c8a:	43 e1       	ldi	r20, 0x13	; 19
 c8c:	51 e0       	ldi	r21, 0x01	; 1
 c8e:	62 e1       	ldi	r22, 0x12	; 18
 c90:	70 e0       	ldi	r23, 0x00	; 0
 c92:	8d e6       	ldi	r24, 0x6D	; 109
 c94:	0e 94 89 01 	call	0x312	; 0x312 <simpleserial_addcmd>
    while(1)
        simpleserial_get();
 c98:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <simpleserial_get>
    while(1)
 c9c:	fd cf       	rjmp	.-6      	; 0xc98 <main+0x96>

00000c9e <_exit>:
 c9e:	f8 94       	cli

00000ca0 <__stop_program>:
 ca0:	ff cf       	rjmp	.-2      	; 0xca0 <__stop_program>
